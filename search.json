[{"path":"https://pharmaverse.github.io/admiralvaccine/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2021 F. Hoffmann-La Roche AG and GlaxoSmithKline LLC  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adce.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADCE","text":"article describes creating ADCE ADaM analysis Vaccine Reactogenicity Data collected SDTM CE domain. current presented example tested using CE SDTM domains ADSL ADaM domain. However, domains used needed (eg temperature data collected VS). Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adce.html","id":"programming-flow","dir":"Articles","previous_headings":"","what":"Programming Flow","title":"Creating ADCE","text":"Read Data Pre-processing Input Dataset Create Reference Dataset Periods Derivation Analysis Dates Join Periods Reference Dataset Derive Relative Day Period Creation Analysis Version GRADING Variable (Either TOXGR SEV) Creation Analysis Sequence Number Final Step : Get Remaining Variables ADSL","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adce.html","id":"readdata","dir":"Articles","previous_headings":"Programming Flow","what":"Read in Data","title":"Creating ADCE","text":"Assumption: CE domain already merged SUPPCE dataset. yet case, join SUPPCE onto parent CE domain using metatools::combine_supp(CE, SUPPCE).","code":"library(admiraldev) library(admiral) library(dplyr) library(lubridate) library(admiralvaccine) library(pharmaversesdtm)  data(\"ce_vaccine\") data(\"admiralvaccine_adsl\")  adsl <- admiralvaccine_adsl ce <- ce_vaccine  ce <- convert_blanks_to_na(ce) adsl <- convert_blanks_to_na(adsl)"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adce.html","id":"cefilter","dir":"Articles","previous_headings":"Programming Flow","what":"Pre-processing of Input Dataset","title":"Creating ADCE","text":"step involves company-specific pre-processing required input dataset analysis. step, filter records reactogenicity events.","code":"adce <- ce %>%   filter(CECAT == \"REACTOGENICITY\")"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adce.html","id":"adperiods","dir":"Articles","previous_headings":"Programming Flow","what":"Create Reference Dataset for Periods","title":"Creating ADCE","text":"Create period dataset - joining period information onto CE records. Need remove datetime variables otherwise causes duplicate issues.","code":"adsl2 <- adsl %>%   select(-c(starts_with(\"AP\") & ends_with(\"DTM\")))  adperiods <- create_period_dataset(   adsl2,   new_vars = exprs(APERSDT = APxxSDT, APEREDT = APxxEDT) )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adce.html","id":"adates","dir":"Articles","previous_headings":"Programming Flow","what":"Derivation of Analysis Dates","title":"Creating ADCE","text":"step, may useful join ADSL CE domain. ADSL variables used derivations selected step. rest relevant ADSL variables added later.","code":"adsl_vars <- exprs(TRTSDT, TRTEDT)  adce <- adce %>%   # join ADSL to CE   derive_vars_merged(     dataset_add = adsl,     new_vars = adsl_vars,     by = exprs(STUDYID, USUBJID)   ) %>%   derive_vars_dt(     dtc = CESTDTC,     new_vars_prefix = \"AST\",     highest_imputation = \"n\"   ) %>%   derive_vars_dt(     dtc = CEENDTC,     new_vars_prefix = \"AEN\",     highest_imputation = \"n\"   ) %>%   derive_vars_dy(     reference_date = TRTSDT,     source_vars = exprs(ASTDT, AENDT)   )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adce.html","id":"mergeperiods","dir":"Articles","previous_headings":"Programming Flow","what":"Join with the Periods Reference Dataset and Derive Relative Day in Period","title":"Creating ADCE","text":"Also add analysis version CEREL(AREL).","code":"adce <-   derive_vars_joined(     adce,     dataset_add = adperiods,     by_vars = exprs(STUDYID, USUBJID),     filter_join = ASTDT >= APERSDT & ASTDT <= APEREDT,     join_type = \"all\"   ) %>%   mutate(     APERSTDY = as.integer(ASTDT - APERSDT) + 1,     AREL = CEREL   )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adce.html","id":"agrade","dir":"Articles","previous_headings":"Programming Flow","what":"Creation of Analysis Version for GRADING Variable (Either TOXGR or SEV)","title":"Creating ADCE","text":"Depending variable collected Grading (TOXGR SEV) CE domain, derive associated analysis version. current example, SEV collected, code using example. addition, derivation Extreme Flags: current example: flag first occurrence severe grade within Period (AOCC01FL).","code":"adce <- adce %>%   mutate(     ASEV = CESEV,     ASEVN = as.integer(factor(ASEV,       levels = c(\"MILD\", \"MODERATE\", \"SEVERE\", \"DEATH THREATENING\")     ))   ) %>%   restrict_derivation(     derivation = derive_var_extreme_flag,     args = params(       by_vars = exprs(USUBJID, APERIOD),       order = exprs(desc(ASEVN), ASTDY, CEDECOD),       new_var = AOCC01FL,       mode = \"first\"     ),     filter = !is.na(APERIOD) & !is.na(ASEV)   )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adce.html","id":"aseq","dir":"Articles","previous_headings":"Programming Flow","what":"Creation of Analysis Sequence Number","title":"Creating ADCE","text":"","code":"adce <- adce %>%   derive_var_obs_number(     new_var = ASEQ,     by_vars = exprs(STUDYID, USUBJID),     order = exprs(CEDECOD, CELAT, CETPTREF, APERIOD),     check_type = \"error\"   ) %>%   derive_vars_duration(     new_var = ADURN,     new_var_unit = ADURU,     start_date = ASTDT,     end_date = AENDT,     in_unit = \"days\",     out_unit = \"days\",     add_one = TRUE,     trunc_out = FALSE   )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adce.html","id":"jadsl_list","dir":"Articles","previous_headings":"Programming Flow","what":"Final Step : Get All the Remaining Variables from ADSL","title":"Creating ADCE","text":"Get list ADSL vars per trial specific needs adjusted using template","code":"adsl_list <- adsl %>%   select(STUDYID, USUBJID, TRT01A, TRT01P, AGE, AGEU, SEX, RACE, COUNTRY, ETHNIC, SITEID, SUBJID)  adce <- adce %>%   derive_vars_merged(     dataset_add = adsl_list,     by_vars = exprs(STUDYID, USUBJID)   )"},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADFACE","text":"article describes creating ADFACE ADaM dataset part Vaccine - Reactogenicity based Center Biologics Evaluation Research (CBER) guidelines. See links information: Center Biologics Evaluation Research (CBER) Guidelines Therapeutic Area Data Standards User Guide Vaccines (TAUG-Vax) Examples currently tested using ADSL (ADaM) face, vs, ex (SDTM) inputs. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating ADFACE","text":"Read Data Pre-processing Input Dataset Merge FACE EX Merge Required ADSL Variables Needed Analysis Derive Fever Records VS Domain Derive/Impute Numeric Date/Time Analysis Day (ADT, ADTM, ADY, ADTF, ATMF) Derive Period Variables (e.g. APxxSDT, APxxEDT, …) Derive Direct Mapping Variables Derive Severity Records Administration Site Events Derive Maximum Records Assign PARAMCD, PARAM, PARAMN, PARCAT1 Derive Maximum Severity Flag Derive Event Occurrence Flag Post-processing Dataset Add ADSL Variables","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating ADFACE","text":"start, data frames needed creation ADFACE read environment. data frames needed VS,EX FACE.","code":"library(admiral) library(admiralvaccine) library(admiraldev) library(pharmaversesdtm) library(dplyr, warn.conflicts = FALSE) library(lubridate) library(stringr) library(tidyr) library(tibble)  data(\"face_vaccine\") data(\"suppface_vaccine\") data(\"ex_vaccine\") data(\"suppex_vaccine\") data(\"vs_vaccine\") data(\"admiralvaccine_adsl\")  face <- convert_blanks_to_na(face_vaccine) ex <- convert_blanks_to_na(ex_vaccine) vs <- convert_blanks_to_na(vs_vaccine) suppface <- convert_blanks_to_na(suppface_vaccine) suppex <- convert_blanks_to_na(suppex_vaccine) adsl <- convert_blanks_to_na(admiralvaccine_adsl)"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"input","dir":"Articles","previous_headings":"Programming Workflow","what":"Pre-processing of Input Dataset","title":"Creating ADFACE","text":"step involves company-specific pre-processing required input dataset analysis. step, filter records reactogenicity events.","code":"face <- face %>%   filter(FACAT == \"REACTOGENICITY\" & grepl(\"ADMIN|SYS\", FASCAT)) %>%   mutate(FAOBJ = str_to_upper(FAOBJ))"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"merge","dir":"Articles","previous_headings":"Programming Workflow","what":"Merge FACE with EX","title":"Creating ADFACE","text":"step, merge face ex domain add required variables ex domain input dataset. subjects multiple vaccination visit function merge input dataset ex dataset throws warning. function derive_vars_merged_vaccine() used merge face ex domain. call return input dataset columns ex_vars added subjects multiple vaccination visit. Though function throw warning subjects multiple vaccination visit, call return input dataset merging supplementary dataset.","code":"adface <- derive_vars_merged_vaccine(   dataset = face,   dataset_ex = ex,   dataset_supp = suppface,   dataset_suppex = suppex,   by_vars_sys = exprs(USUBJID, FATPTREF = EXLNKGRP),   by_vars_adms = exprs(USUBJID, FATPTREF = EXLNKGRP, FALOC = EXLOC, FALAT = EXLAT),   ex_vars = exprs(EXTRT, EXDOSE, EXSEQ, EXSTDTC, EXENDTC, VISIT, VISITNUM) )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"adsl","dir":"Articles","previous_headings":"Programming Workflow","what":"Merge Required ADSL Variables Needed for Analysis","title":"Creating ADFACE","text":"step, may useful join ADSL face domain. ADSL variables used derivations selected step. rest relevant ADSL variables added later. call return input dataset columns RFSTDTC, RFENDTC added.","code":"adsl_vars <- exprs(RFSTDTC, RFENDTC)  adface <- derive_vars_merged(   face,   dataset_add = adsl,   new_vars = adsl_vars,   by_vars = exprs(STUDYID, USUBJID) )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"fever","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Fever Records from VS Domain","title":"Creating ADFACE","text":"step, merge fever records VS domain input dataset fever records present input dataset. function derive_fever_records() used merge fever records. records also used maximum temperature calculation. call returns input dataset FEVER records added input dataset FEVER records. input dataset FEVER records, output dataset input dataset.","code":"adface <- derive_fever_records(   dataset = adface,   dataset_source = ungroup(vs),   filter_source = VSCAT == \"REACTOGENICITY\" & VSTESTCD == \"TEMP\",   faobj = \"FEVER\" )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"datetime","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive/Impute Numeric Date/Time and Analysis Day (ADT, ADTM, ADTF, ATMF, ADY)","title":"Creating ADFACE","text":"function derive_vars_dt() can used derive ADT. function allows user impute date well. Similarly, ADTM can created using function derive_vars_dtm(). Imputation can done date time components ADTM. Example calls: ADT derived, function derive_vars_dy() can used derive ADY. example assumes ADT RFSTDTC exist data frame.","code":"adface <- adface %>%   derive_vars_dt(     new_vars_prefix = \"A\",     dtc = FADTC   ) %>%   derive_vars_dtm(     new_vars_prefix = \"A\",     dtc = FADTC,     highest_imputation = \"n\"   ) adface <- adface %>%   mutate(RFSTDTC = as.Date(RFSTDTC)) %>%   derive_vars_dy(reference_date = RFSTDTC, source_vars = exprs(ADT))"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"periodvars","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Period Variables (e.g. APxxSDT, APxxEDT, …)","title":"Creating ADFACE","text":"admiral core package separate functions handle period variables since variables study specific. See “Visit Period Variables” vignette information. variables derived based period reference dataset, may derived later point flow. example, phases like “Treatment Phase” “Follow ” derived based treatment start end date.","code":"period_ref <- create_period_dataset(   dataset = adsl,   new_vars = exprs(     APERSDT = APxxSDT, APEREDT = APxxEDT, TRTA = TRTxxA,     TRTP = TRTxxP   ) )  adface <- derive_vars_joined(   adface,   dataset_add = period_ref,   by_vars = exprs(STUDYID, USUBJID),   filter_join = ADT >= APERSDT & ADT <= APEREDT,   join_type = \"all\" )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"mapping","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Direct Mapping Variables","title":"Creating ADFACE","text":"step,create user defined function assign AVAL values AVALC used steps. user defined functions look like following: mapping variables left User. example mapping may :","code":"sev_to_numeric <- function(x, y) {   case_when(     x == \"NONE\" ~ 0,     x == \"MILD\" ~ 1,     x == \"MODERATE\" ~ 2,     x == \"SEVERE\" ~ 3,     TRUE ~ y   ) } adface <- adface %>%   mutate(     AVALC = as.character(FASTRESC),     AVAL = suppressWarnings(as.numeric(FASTRESN)),     AVAL = sev_to_numeric(AVALC, AVAL),     ATPTREF = FATPTREF,     ATPT = FATPT,     ATPTN = FATPTNUM   )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"sev","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Severity Records for Administration Site Events","title":"Creating ADFACE","text":"function derive_diam_to_sev_records() used derive severity records diameter records event. severity records created useful calculating maximum severity. call returns input dataset severity records derived diameter records event. default, populate SEV Severity/Intensity FATESTCD FATEST newly added records. function allows user change FATESTCD FATEST well.","code":"adface <- derive_diam_to_sev_records(   dataset = adface,   diam_code = \"DIAMETER\",   faobj_values = c(\"REDNESS\", \"SWELLING\"),   testcd_sev = \"SEV\",   test_sev = \"Severity/Intensity\",   none = 0,   mild = 2,   mod = 5,   sev = 10 )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"max","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Maximum Records","title":"Creating ADFACE","text":"step, derive maximum records severity, diameter, temperature using function derive_extreme_records(). call returns input dataset maximum records added severity, diameter, temperature.","code":"adface <- derive_extreme_records(   dataset = adface,   dataset_add = adface,   filter_add = FATESTCD == \"SEV\",   by_vars = exprs(USUBJID, FAOBJ, ATPTREF),   order = exprs(AVAL),   check_type = \"none\",   mode = \"last\",   set_values_to = exprs(     FATEST = \"Maximum Severity\",     FATESTCD = \"MAXSEV\"   ) )  adface <- derive_extreme_records(   dataset = adface,   dataset_add = adface,   filter_add = FAOBJ %in% c(\"REDNESS\", \"SWELLING\") & FATESTCD == \"DIAMETER\",   by_vars = exprs(USUBJID, FAOBJ, FALNKGRP),   order = exprs(AVAL),   check_type = \"none\",   mode = \"last\",   set_values_to = exprs(     FATEST = \"Maximum Diameter\",     FATESTCD = \"MAXDIAM\"   ) )  adface <- derive_extreme_records(   dataset = adface,   dataset_add = adface,   filter_add = FAOBJ == \"FEVER\",   by_vars = exprs(USUBJID, FAOBJ, ATPTREF),   order = exprs(VSSTRESN),   check_type = \"none\",   mode = \"last\",   set_values_to = exprs(     FATEST = \"Maximum Temperature\",     FATESTCD = \"MAXTEMP\"   ) )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"paramcd","dir":"Articles","previous_headings":"Programming Workflow","what":"Assign PARAMCD, PARAM, PARAMN, PARCAT1","title":"Creating ADFACE","text":"assign parameter level values PARAMCD, PARAM, PARAMN, etc., lookup needs created join source data. PARCAT1, PARCAT2 variables assigned FACAT, FASCAT variables. example, creating ADFACE dataset, lookup based SDTM --TESTCD value can created: lookup can now joined source data: PARAMCD always derived lookup dataset whereas PARAMN, PARAM, PARCAT1, PARCAT2 can either derived lookup dataset mentioned merge_vars argument derived function.","code":"adface <- derive_vars_params(   dataset = adface,   lookup_dataset = lookup_dataset,   merge_vars = exprs(PARAMCD, PARAMN) )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"maxflag","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Maximum Severity Flag","title":"Creating ADFACE","text":"function derive_vars_max_flag() used derive flag variable maximum values event. flag1 - Flags maximum value per subject per event per Vaccination. flag2 - Flags maximum value per subject per event Overall. call return input dataset columns ANL01FL, ANL02FL added default. function allows user change name new variables created.","code":"adface <- derive_vars_max_flag(   dataset = adface,   flag1 = \"ANL01FL\",   flag2 = \"ANL02FL\" ) #> Joining with `by = join_by(STUDYID, DOMAIN, USUBJID, FASEQ, FALNKGRP, PARAM, #> FALAT, FALNKID, FALOC, FATESTCD, FATEST, FAOBJ, FACAT, FASCAT, FAEVAL, FAORRES, #> FAORRESU, EPOCH, FADTC, FADY, FATPT, FATPTNUM, FATPTREF, FARFTDTC, FAEVLINT, #> FAEVINTX, FASTAT, FAREASND, FASTRESC, FASTRESN, FASTRESU, RFSTDTC, RFENDTC, #> VSSTRESN, ADT, ADTM, ADY, APERIOD, APERSDT, APEREDT, TRTA, TRTP, AVALC, AVAL, #> ATPTREF, ATPT, ATPTN, PARAMCD, PARAMN, PARCAT1, PARCAT2)` #> Joining with `by = join_by(STUDYID, DOMAIN, USUBJID, FASEQ, FALNKGRP, PARAM, #> FALAT, FALNKID, FALOC, FATESTCD, FATEST, FAOBJ, FACAT, FASCAT, FAEVAL, FAORRES, #> FAORRESU, EPOCH, FADTC, FADY, FATPT, FATPTNUM, FATPTREF, FARFTDTC, FAEVLINT, #> FAEVINTX, FASTAT, FAREASND, FASTRESC, FASTRESN, FASTRESU, RFSTDTC, RFENDTC, #> VSSTRESN, ADT, ADTM, ADY, APERIOD, APERSDT, APEREDT, TRTA, TRTP, AVALC, AVAL, #> ATPTREF, ATPT, ATPTN, PARAMCD, PARAMN, PARCAT1, PARCAT2, ANL01FL)`"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"eventflag","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Event Occurrence Flag","title":"Creating ADFACE","text":"function derive_vars_event_flag() used derive flag variable events occurred. new_var1 - Flags record least one event occurred within observation period. new_var2 - Flags record event occurred. call return input dataset columns EVENTFL, EVENTDFL added default. function allows user change name new variables created well.","code":"adface <- derive_vars_event_flag(   dataset = adface,   by_vars = exprs(USUBJID, FAOBJ, ATPTREF),   aval_cutoff = 2.5,   new_var1 = EVENTFL,   new_var2 = EVENTDFL )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"post","dir":"Articles","previous_headings":"Programming Workflow","what":"Post-processing of the Dataset","title":"Creating ADFACE","text":"step, remove values derived records SDTM variables.","code":"adface <- post_process_reacto(   dataset = adface,   filter_dataset = FATESTCD %in% c(\"MAXDIAM\", \"MAXSEV\", \"MAXTEMP\") |     (FATESTCD %in% c(\"OCCUR\", \"SEV\") & FAOBJ %in% c(\"FEVER\", \"REDNESS\", \"SWELLING\")) )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adface.html","id":"adsl_vars","dir":"Articles","previous_headings":"Programming Workflow","what":"Add ADSL variables","title":"Creating ADFACE","text":"needed, ADSL variables can now added. List ADSL variables already merged held vector adsl_vars","code":"adsl <- adsl %>%   convert_blanks_to_na() %>%   filter(!is.na(USUBJID))  adface <- derive_vars_merged(   dataset = adface,   dataset_add = select(adsl, !!!negate_vars(adsl_vars)),   by_vars = exprs(STUDYID, USUBJID) )"},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADIS","text":"article describes create ADIS ADaM domain. parameters derived reflects common vaccine immunogenicity endpoints. Examples currently presented tested using ADSL (ADaM) SUPPIS (SDTM) inputs. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating ADIS","text":"Read Data Combine SUPPIS Derive Timing Variables Derive ADT ADY variables Parameters Derivation Derive PARCAT1 CUTOFFx Variables Derive AVAL, AVALU DTYPE Variables Derive BASE Variables Derive CHG R2BASE Variables Derive CRITx Variables Derive TRTP/Variables Derive PPS Record Level Flag Variable Add ADSL Variables","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating ADIS","text":"first step may read input data need order proceed ADIS development. template, SDTM., SDTM.SUPPIS ADAM.ADSL used.","code":"library(admiral) library(dplyr) library(lubridate) library(admiraldev) library(admiralvaccine) library(pharmaversesdtm) library(metatools)  # Load source datasets data(\"is_vaccine\") data(\"suppis_vaccine\") data(\"admiralvaccine_adsl\")  # Convert blanks into NA is <- convert_blanks_to_na(is_vaccine) suppis <- convert_blanks_to_na(suppis_vaccine) adsl <- convert_blanks_to_na(admiralvaccine_adsl)"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"combine_supp","dir":"Articles","previous_headings":"Programming Workflow","what":"Combine IS with SUPPIS","title":"Creating ADIS","text":"Combine supplemental domain SUPPIS.","code":"is_suppis <- combine_supp(is, suppis)"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"avisit","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Timing Variables","title":"Creating ADIS","text":"Derive AVISIT, AVISITN, ATPT, ATPTN ATPTREF variables. Please, update visit records according Study Design/Protocol. visit values, please refers ADAM SPECIFICATIONS.","code":"adis_avisit <- is_suppis %>%   mutate(     AVISITN = as.numeric(VISITNUM),     AVISIT = case_when(       VISITNUM == 10 ~ \"Visit 1\",       VISITNUM == 20 ~ \"Visit 2\",       VISITNUM == 30 ~ \"Visit 3\",       VISITNUM == 40 ~ \"Visit 4\",       is.na(VISITNUM) ~ NA_character_     )   )  adis_atpt <- adis_avisit %>%   mutate(     ATPTN = as.numeric(VISITNUM / 10),     ATPT = case_when(       VISITNUM == 10 ~ \"Visit 1 (Day 1)\",       VISITNUM == 20 ~ \"Visit 2 (Day 31)\",       VISITNUM == 30 ~ \"Visit 3 (Day 61)\",       VISITNUM == 40 ~ \"Visit 4 (Day 121)\",       is.na(VISITNUM) ~ NA_character_     ),     ATPTREF = case_when(       VISITNUM %in% c(10, 20) ~ \"FIRST TREATMENT\",       VISITNUM %in% c(30, 40) ~ \"SECOND TREATMENT\",       is.na(VISITNUM) ~ NA_character_     )   )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"adt","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive ADT and ADY Variables","title":"Creating ADIS","text":"ADT derivation, please follow imputation rules. example : day missing 15 imputed; day month missing 30-06 imputed; input date missing imputation done; ADY derivation RFSTDTC used template. derivation different, please adapt.","code":"# ADT derivation # Add also PPROTFL from ADSL (to avoid additional merges) in order to derive # PPSRFL at step 11. adis_adt <- derive_vars_dt(   dataset = adis_atpt,   new_vars_prefix = \"A\",   dtc = ISDTC,   highest_imputation = \"M\",   date_imputation = \"mid\",   flag_imputation = \"none\" )  # ADY derivation # Attach RFSTDTC from ADSL in order to derive ADY adis_ady <- adis_adt %>%   derive_vars_merged(     dataset_add = adsl,     new_vars = exprs(RFSTDTC, PPROTFL),     by_vars = exprs(STUDYID, USUBJID)   ) %>%   mutate(     RFSTDT = as.Date(RFSTDTC)   ) %>%   derive_vars_dy(     reference_date = RFSTDT,     source_vars = exprs(ADT)   ) %>%   select(-RFSTDT)"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"param","dir":"Articles","previous_headings":"Programming Workflow","what":"Parameters Derivation","title":"Creating ADIS","text":"template, duplicated records PARAMCD created. particular, may find 4 different parameters values: Original values relative log10 values; 4fold values relative log10 values; Please, add remove datasets according study needs.","code":"# Create record duplication in order to plot both original and LOG10 parameter values. # Add also records related to 4fold. # Please, keep or modify PARAM values according to your purposes.  is_log <- adis_ady %>%   mutate(DERIVED = \"LOG10\")  is_4fold <- adis_ady %>%   mutate(DERIVED = \"4FOLD\")  is_log_4fold <- adis_ady %>%   mutate(DERIVED = \"LOG10 4FOLD\")  adis_der <- bind_rows(adis_ady, is_log, is_4fold, is_log_4fold) %>%   arrange(STUDYID, USUBJID, VISITNUM, ISSEQ, !is.na(DERIVED)) %>%   mutate(DERIVED = if_else(is.na(DERIVED), \"ORIG\", DERIVED))   adis_paramcd <- adis_der %>%   mutate(     # PARAMCD: for log values, concatenation of L and ISTESTCD.     PARAMCD = case_when(       DERIVED == \"ORIG\" ~ ISTESTCD,       DERIVED == \"LOG10\" ~ paste0(ISTESTCD, \"L\"),       DERIVED == \"4FOLD\" ~ paste0(ISTESTCD, \"F\"),       # As per CDISC rule, PARAMCD should be 8 charcaters long. Please, adapt if needed       DERIVED == \"LOG10 4FOLD\" ~ paste0(substr(ISTESTCD, 1, 6), \"LF\")     )   )   # Update param_lookup dataset with your PARAM values. param_lookup <- tribble(   ~PARAMCD, ~PARAM, ~PARAMN,   \"J0033VN\", \"J0033VN Antibody\", 1,   \"I0019NT\", \"I0019NT Antibody\", 2,   \"M0019LN\", \"M0019LN Antibody\", 3,   \"R0003MA\", \"R0003MA Antibody\", 4,   \"J0033VNL\", \"LOG10 (J0033VN Antibody)\", 11,   \"I0019NTL\", \"LOG10 (I0019NT Antibody)\", 12,   \"M0019LNL\", \"LOG10 (M0019LN Antibody)\", 13,   \"R0003MAL\", \"LOG10 (R0003MA Antibody)\", 14,   \"J0033VNF\", \"4FOLD (J0033VN Antibody)\", 21,   \"I0019NTF\", \"4FOLD (I0019NT Antibody)\", 22,   \"M0019LNF\", \"4FOLD (M0019LN Antibody)\", 23,   \"R0003MAF\", \"4FOLD (R0003MA Antibody)\", 24,   \"J0033VLF\", \"LOG10 4FOLD (J0033VN Antibody)\", 31,   \"I0019NLF\", \"LOG10 4FOLD (I0019NT Antibody)\", 32,   \"M0019LLF\", \"LOG10 4FOLD (M0019LN Antibody)\", 33,   \"R0003MLF\", \"LOG10 4FOLD (R0003MA Antibody)\", 34 )  adis_param_paramn <- derive_vars_merged_lookup(   dataset = adis_paramcd,   dataset_add = param_lookup,   new_vars = exprs(PARAM, PARAMN),   by_vars = exprs(PARAMCD) ) #> All `PARAMCD` are mapped."},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"parcat","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive PARCAT1 and CUTOFFx Variables","title":"Creating ADIS","text":"Derive PARCAT1 CUTOFFx variables. Fake values put CUTOFF values. Please, adapt base objectives.","code":"adis_parcat1_cutoff <- adis_param_paramn %>%   mutate(     PARCAT1 = ISCAT,     # Please, define your additional cutoff values. Delete if not needed.     CUTOFF02 = 4,     CUTOFF03 = 8   )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"aval","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive AVAL, AVALU and DTYPE Variables","title":"Creating ADIS","text":"core ADIS template. ORIGINAL (relative log10 values) following rule followed AVAL derivation: lab result (ISSTRESN) Lower Limit Quantitation, set ISSTRESN/2; lab result (ISSTRESN) falls Lower Limit Quantitation Upper Limit Quantitation range, set ISSTRESN. Upper Limit Quantitation present (mapped SDTM), AVAL equals ISSTRESN greater Lower Limit Quantitation; lab result (ISSTRESN) greater Upper Limit Quantitation, set ISSTRESN. Upper_rule optional argument. Upper Limit Quantitation present, can remove ; 4fold (relative log10 values) rule pretty , except LAB result (ISSTRESN) lower Lower Limit Quantitation. case put ISSTRESN instead ISSTRESN/2. log10 transformations, simply follow rules apply log10 function. Please, update algorithm according Protocol/SAP. AVALU set equal .ISSTRESU. Later can find SERCAT1/N DTYPE derivations. DTYPE filled records exceed ISULOQ ISSLOQ, respectively. ISULOQ present, DTYPE filled lab result Lower Limit Quantitation.","code":"adis_or <- adis_parcat1_cutoff %>%   filter(DERIVED == \"ORIG\") %>%   derive_var_aval_adis(     lower_rule = ISLLOQ / 2,     middle_rule = ISSTRESN,     upper_rule = ISULOQ,     round = 2   )  adis_log_or <- adis_parcat1_cutoff %>%   filter(DERIVED == \"LOG10\") %>%   derive_var_aval_adis(     lower_rule = log10(ISLLOQ / 2),     middle_rule = log10(ISSTRESN),     upper_rule = log10(ISULOQ),     round = 2   )  adis_4fold <- adis_parcat1_cutoff %>%   filter(DERIVED == \"4FOLD\") %>%   derive_var_aval_adis(     lower_rule = ISLLOQ,     middle_rule = ISSTRESN,     upper_rule = ISULOQ,     round = 2   )  adis_log_4fold <- adis_parcat1_cutoff %>%   filter(DERIVED == \"LOG10 4FOLD\") %>%   derive_var_aval_adis(     lower_rule = log10(ISLLOQ),     middle_rule = log10(ISSTRESN),     upper_rule = log10(ISULOQ),     round = 2   )  adis_aval_sercat1 <- bind_rows(adis_or, adis_log_or, adis_4fold, adis_log_4fold) %>%   mutate( # AVALU derivation (please delete if not needed for your study)     AVALU = ISSTRESU,      # SERCAT1 derivation     SERCAT1 = case_when(       ISBLFL == \"Y\" & !is.na(AVAL) & !is.na(ISLLOQ) & AVAL < ISLLOQ ~ \"S-\",       ISBLFL == \"Y\" & !is.na(AVAL) & !is.na(ISLLOQ) & AVAL >= ISLLOQ ~ \"S+\",       ISBLFL == \"Y\" & (is.na(AVAL) | is.na(ISLLOQ)) ~ \"UNKNOWN\"     )   )   # Update param_lookup2 dataset with your SERCAT1N values. param_lookup2 <- tribble(   ~SERCAT1, ~SERCAT1N,   \"S-\", 1,   \"S+\", 2,   \"UNKNOWN\", 3,   NA_character_, NA_real_ )  adis_sercat1n <- derive_vars_merged_lookup(   dataset = adis_aval_sercat1,   dataset_add = param_lookup2,   new_vars = exprs(SERCAT1N),   by_vars = exprs(SERCAT1) ) #> All `SERCAT1` are mapped.   # DTYPE derivation. # Please update code when <,<=,>,>= are present in your lab results (in ISSTRESC)  if (any(names(adis_sercat1n) == \"ISULOQ\") == TRUE) {   adis_dtype <- adis_sercat1n %>%     mutate(DTYPE = case_when(       DERIVED %in% c(\"ORIG\", \"LOG10\") & !is.na(ISLLOQ) &         ((ISSTRESN < ISLLOQ) | grepl(\"<\", ISORRES)) ~ \"HALFLLOQ\",       DERIVED %in% c(\"ORIG\", \"LOG10\") & !is.na(ISULOQ) &         ((ISSTRESN > ISULOQ) | grepl(\">\", ISORRES)) ~ \"ULOQ\",       TRUE ~ NA_character_     )) }  if (any(names(adis_sercat1n) == \"ISULOQ\") == FALSE) {   adis_dtype <- adis_sercat1n %>%     mutate(DTYPE = case_when(       DERIVED %in% c(\"ORIG\", \"LOG10\") & !is.na(ISLLOQ) &         ((ISSTRESN < ISLLOQ) | grepl(\"<\", ISORRES)) ~ \"HALFLLOQ\",       TRUE ~ NA_character_     )) }"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"base","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive BASE Variables","title":"Creating ADIS","text":"Derive Baseline values Subject/Visit relative flag, ABLFL. later stage, derive BASECAT variable, represents base category. Update accordingly.","code":"# BASETYPE derivation adis_basetype <- derive_basetype_records(   adis_dtype,   basetypes = exprs(\"VISIT 1\" = AVISITN %in% c(10, 30)) )  # BASE derivation adis_base <- derive_var_base(   adis_basetype,   by_vars = exprs(STUDYID, USUBJID, PARAMN),   source_var = AVAL,   new_var = BASE,   filter = VISITNUM == 10 )   # ABLFL derivation adis_ablfl <- restrict_derivation(   adis_base,   derivation = derive_var_extreme_flag,   args = params(     by_vars = exprs(STUDYID, USUBJID, PARAMN),     order = exprs(STUDYID, USUBJID, VISITNUM, PARAMN),     new_var = ABLFL,     mode = \"first\"   ),   filter = VISITNUM == 10 & !is.na(BASE) ) %>%   arrange(STUDYID, USUBJID, !is.na(DERIVED), VISITNUM, PARAMN)   # BASECAT derivation adis_basecat <- adis_ablfl %>%   mutate(     BASECAT1 = case_when(       !grepl(\"L\", PARAMCD) & BASE < 10 ~ \"Titer value < 1:10\",       !grepl(\"L\", PARAMCD) & BASE >= 10 ~ \"Titer value >= 1:10\",       grepl(\"L\", PARAMCD) & BASE < 10 ~ \"Titer value < 1:10\",       grepl(\"L\", PARAMCD) & BASE >= 10 ~ \"Titer value >= 1:10\"     )   )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"chg","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive CHG and R2BASE Variables","title":"Creating ADIS","text":"Derive change baseline values. Derive ratio base values.","code":"adis_chg <- restrict_derivation(   adis_basecat,   derivation = derive_var_chg,   filter = AVISITN > 10 )  adis_r2b <- restrict_derivation(   adis_chg,   derivation = derive_var_analysis_ratio,   args = params(     numer_var = AVAL,     denom_var = BASE   ),   filter = AVISITN > 10 ) %>%   arrange(STUDYID, USUBJID, DERIVED, ISSEQ) %>%   select(-DERIVED)"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"crit","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive CRITx Variables","title":"Creating ADIS","text":"Derive Criteria Evaluation Analysis Flags. function selects subset rows input dataset apply criterion . criterion met CRIT1FL (name specified first argument) equal Y; N otherwise. function returns relative numeric CRIT1FN variable (1 0 criterion met, respectively) label CRIT1 variable (text specified label_var argument).","code":"adis_crit <- derive_vars_crit(   dataset = adis_r2b,   prefix = \"CRIT1\",   crit_label = \"Titer >= ISLLOQ\",   condition = !is.na(AVAL) & !is.na(ISLLOQ),   criterion = AVAL >= ISLLOQ )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"trtp","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive TRTP/A Variables","title":"Creating ADIS","text":"","code":"period_ref <- create_period_dataset(   dataset = adsl,   new_vars = exprs(APERSDT = APxxSDT, APEREDT = APxxEDT, TRTA = TRTxxA, TRTP = TRTxxP) )  adis_trt <- derive_vars_joined(   adis_crit,   dataset_add = period_ref,   by_vars = exprs(STUDYID, USUBJID),   filter_join = ADT >= APERSDT & ADT <= APEREDT,   join_type = \"all\" )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"pps","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive PPS Record Level Flag Variable","title":"Creating ADIS","text":"record level flag identifies rows included/excluded PPS related objectives. step change according study needs.","code":"adis_ppsrfl <- adis_trt %>%   mutate(PPSRFL = if_else(VISITNUM %in% c(10, 30) & PPROTFL == \"Y\", \"Y\", NA_character_))"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adis.html","id":"adsl_vars","dir":"Articles","previous_headings":"Programming Workflow","what":"Add ADSL Variables","title":"Creating ADIS","text":"Attach ADAM.ADSL variables build-dataset. may need keep subset , please update accordingly.","code":"# Get list of ADSL variables not to be added to ADIS adsl_vars <- exprs(RFSTDTC, PPROTFL)  adis <- derive_vars_merged(   dataset = adis_ppsrfl,   dataset_add = select(admiralvaccine_adsl, !!!negate_vars(adsl_vars)),   by_vars = exprs(STUDYID, USUBJID) )"},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/admiralvaccine.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get Started","text":"package extension, new admiral best place first start reading Get Started guide. extension package follows main idea conventions, re-uses many functions admiral, important thoroughly understand able use admiralvaccine.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/admiralvaccine.html","id":"derivations","dir":"Articles","previous_headings":"","what":"Derivations","title":"Get Started","text":"important functions admiralvaccine derivations. follow conventions admiral focused vaccine-specific needs.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/admiralvaccine.html","id":"input-and-output","dir":"Articles","previous_headings":"","what":"Input and Output","title":"Get Started","text":"expected input dataset grouped. Otherwise error issued. output dataset ungrouped. observations ordered dedicated way. particular, order observations input dataset may preserved.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/admiralvaccine.html","id":"starting-a-script","dir":"Articles","previous_headings":"","what":"Starting a Script","title":"Get Started","text":"vaccine ADaM data structures, overview flow example function calls common steps provided following vignettes: Creating ADSL Creating ADCE Creating ADFACE Creating ADIS admiralvaccine also provides template R scripts starting point. can created calling use_ad_template() {admiral}, e.g., list available templates can obtained list_all_templates() {admiral}:","code":"library(admiral) use_ad_template(   adam_name = \"adce\",   save_path = \"./ad_adce.R\",   package = \"admiralvaccine\" ) list_all_templates(package = \"admiralvaccine\") #> Existing ADaM templates in package 'admiralvaccine': #> • ADCE #> • ADFACE #> • ADIS #> • ADSL"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/admiralvaccine.html","id":"support","dir":"Articles","previous_headings":"","what":"Support","title":"Get Started","text":"Support provided via admiral Slack channel.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adsl.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADSL","text":"article describes creating ADSL ADaM specific Vaccines. Examples currently presented tested using DM, EX SDTM domains. However, domains used. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adsl.html","id":"programming-flow","dir":"Articles","previous_headings":"","what":"Programming Flow","title":"Creating ADSL","text":"Read Data Derive Period, Subperiod, Phase Variables (e.g. APxxSDT, APxxEDT, …) Derive Treatment Variables (TRT0xP, TRT0xA) Derive/Impute Numeric Treatment Date/Time Duration (TRTSDT, TRTEDT, TRTDURD) Population Flags (e.g. SAFFL) Derive Vaccination Date Variables Create Period Variables (Study Specific) Derive Variables) Add Labels Attributes","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adsl.html","id":"readdata","dir":"Articles","previous_headings":"Programming Flow","what":"Read in Data","title":"Creating ADSL","text":"start, data frames needed creation ADSL read environment. company specific process. data frames needed may DM, EX. DM domain used basis ADSL:","code":"library(admiral) library(admiralvaccine) library(pharmaversesdtm) library(dplyr, warn.conflicts = FALSE) library(lubridate) library(stringr) library(admiraldev)  data(\"dm_vaccine\") data(\"ex_vaccine\")  dm <- convert_blanks_to_na(dm_vaccine) ex <- convert_blanks_to_na(ex_vaccine) adsl <- dm %>%   select(-DOMAIN)"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adsl.html","id":"periodvars","dir":"Articles","previous_headings":"Programming Flow","what":"Derive Period, Subperiod, and Phase Variables (e.g. APxxSDT, APxxEDT, …)","title":"Creating ADSL","text":"admiral core package separate functions handle period variables since variables study specific. See “Visit Period Variables” vignette information. variables derived based period reference dataset, may derived later point flow. example, phases like “Treatment Phase” “Follow ” derived based treatment start end date.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adsl.html","id":"treatmentvar","dir":"Articles","previous_headings":"Programming Flow","what":"Derive Treatment Variables (TRT0xP, TRT0xA)","title":"Creating ADSL","text":"mapping treatment variables left ADaM programmer. example mapping study without periods may :","code":"adsl <- dm %>%   mutate(     TRT01P = substring(ARM, 1, 9),     TRT02P = substring(ARM, 11, 100)   ) %>%   derive_vars_merged(     dataset_add = ex,     filter_add = EXLNKGRP == \"VACCINATION 1\",     new_vars = exprs(TRT01A = EXTRT),     by_vars = exprs(STUDYID, USUBJID)   ) %>%   derive_vars_merged(     dataset_add = ex,     filter_add = EXLNKGRP == \"VACCINATION 2\",     new_vars = exprs(TRT02A = EXTRT),     by_vars = exprs(STUDYID, USUBJID)   )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adsl.html","id":"trtdatetime","dir":"Articles","previous_headings":"Programming Flow","what":"Derive/Impute Numeric Treatment Date/Time and Duration (TRTSDTM, TRTEDTM, TRTDURD)","title":"Creating ADSL","text":"function derive_vars_merged() can used derive treatment start end date/times using ex domain. pre-processing step ex required convert variable EXSTDTC EXSTDTC datetime variables impute missing date time components. Conversion imputation done derive_vars_dtm(). Example calls: call returns original data frame column TRTSDTM, TRTSTMF, TRTEDTM, TRTETMF added. Exposure observations incomplete date zero doses non placebo treatments ignored. Missing time parts imputed first last start end date respectively. datetime variables returned can converted dates using derive_vars_dtm_to_dt() function. Now, TRTSDT TRTEDT derived, function derive_var_trtdurd() can used calculate Treatment duration (TRTDURD).","code":"# impute start and end time of exposure to first and last respectively, do not impute date ex_ext <- ex %>%   derive_vars_dtm(     dtc = EXSTDTC,     new_vars_prefix = \"EXST\"   ) %>%   derive_vars_dtm(     dtc = EXENDTC,     new_vars_prefix = \"EXEN\"   ) adsl <- adsl %>%   derive_vars_merged(     dataset_add = ex_ext,     filter_add = (EXDOSE > 0 |       (EXDOSE == 0 &         str_detect(EXTRT, \"VACCINE\"))) &       !is.na(EXSTDTM),     new_vars = exprs(TRTSDTM = EXSTDTM),     order = exprs(EXSTDTM, EXSEQ),     mode = \"first\",     by_vars = exprs(STUDYID, USUBJID)   ) %>%   derive_vars_merged(     dataset_add = ex_ext,     filter_add = (EXDOSE > 0 |       (EXDOSE == 0 &         str_detect(EXTRT, \"VACCINE\"))) & !is.na(EXENDTM),     new_vars = exprs(TRTEDTM = EXENDTM),     order = exprs(EXENDTM, EXSEQ),     mode = \"last\",     by_vars = exprs(STUDYID, USUBJID)   ) adsl <- adsl %>%   derive_vars_dtm_to_dt(source_vars = exprs(TRTSDTM, TRTEDTM)) adsl <- adsl %>%   derive_var_trtdurd()"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adsl.html","id":"popflag","dir":"Articles","previous_headings":"Programming Flow > Derive/Impute Numeric Treatment Date/Time and Duration (TRTSDTM, TRTEDTM, TRTDURD)","what":"Population Flags (e.g. SAFFL)","title":"Creating ADSL","text":"Since populations flags mainly company/study specific dedicated functions provided, cases can easily derived using derive_var_merged_exist_flag(). example implementation :","code":"adsl <- derive_var_merged_exist_flag(   dataset = adsl,   dataset_add = ex,   by_vars = exprs(STUDYID, USUBJID),   new_var = SAFFL,   condition = (EXDOSE > 0 | (EXDOSE == 0 & str_detect(EXTRT, \"VACCINE\"))) ) %>%   mutate(     PPROTFL = \"Y\"   )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adsl.html","id":"vax_date","dir":"Articles","previous_headings":"Programming Flow","what":"Derive Vaccination Date Variables","title":"Creating ADSL","text":"step, create vaccination date variables EX domain. function derive_vars_vaxdt() returns variables VAX01DT,VAX02DT… added adsl dataset based number vaccinations. multiple vaccinations visit per subject, warning provided first observation filtered based variable order specified order argument. case, user needs select by_vars appropriately. call return input dataset columns VAX01DT, VAX02DT added.","code":"adsl <- derive_vars_vaxdt(   dataset = ex,   dataset_adsl = adsl,   by_vars = exprs(USUBJID, VISITNUM),   order = exprs(USUBJID, VISITNUM, VISIT, EXSTDTC) )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adsl.html","id":"period","dir":"Articles","previous_headings":"Programming Flow","what":"Create Period Variables (Study Specific)","title":"Creating ADSL","text":"step create period variables study specific, User can change logic per study requirement. call return input dataset columns AP01SDT, AP01EDT, AP02SDT, AP02EDT added.","code":"adsl <- adsl %>%   mutate(     AP01SDT = VAX01DT,     AP01EDT = if_else(!is.na(VAX02DT), VAX02DT - 1, as.Date(RFPENDTC)),     AP02SDT = if_else(!is.na(VAX02DT), VAX02DT, NA_Date_),     AP02EDT = if_else(!is.na(AP02SDT), as.Date(RFPENDTC), NA_Date_)   )"},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adsl.html","id":"other","dir":"Articles","previous_headings":"Programming Flow","what":"Derive Other Variables","title":"Creating ADSL","text":"users can add specific code cover need analysis. following functions helpful many ADSL derivations: derive_vars_merged() - Merge Variables Dataset Input Dataset derive_var_merged_exist_flag() - Merge Existence Flag derive_var_merged_summary() - Merge Summary Variable See also Generic Functions.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/articles/adsl.html","id":"attributes","dir":"Articles","previous_headings":"Programming Flow","what":"Add Labels and Attributes","title":"Creating ADSL","text":"Adding labels attributes SAS transport files supported following packages: metacore: establish common foundation use metadata within R session. metatools: enable use metacore objects. Metatools can used build datasets enhance columns existing datasets well checking datasets metadata. xportr: functionality associate metadata information local R data frame, perform data set level validation checks convert transport v5 file(xpt). NOTE: packages experimental phase, vision associated End End pipeline umbrella pharmaverse. example applying metadata perform associated checks can found pharmaverse E2E example.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sukalpo Saha. Author, maintainer. Arjun Rubalingam. Author. Ben Straub. Author. Vikram S. Author. Dhivya Kanagaraj. Author. Federico Baratin. Author. Yamini Purna Bollu. Author. Ilse Augustyns. Author. Kalyani Bodicherla. Author. Hilde Delanghe. Author. Lee Armishaw. Author. Neetu Sangari. Contributor. Abdul Khayat. Contributor. Ankur Jindal. Contributor. Jayashree V. Contributor. Jagadish Katam. Contributor. Andrea Pammolli. Contributor. Daniele Bottigliengo. Contributor. Ranya Ben Hsain. Contributor. Marleen Nijs. Contributor. Mandy Peng. Contributor. Tina Zhai. Contributor. Ross Farrugia. Contributor. Stefan Bundfuss. Contributor. Edoardo Mancini. Contributor. Pfizer Inc.. Copyright holder, funder. GlaxoSmithKline LLC. Copyright holder, funder. Johnson & Johnson. Copyright holder, funder.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Saha S, Rubalingam , Straub B, S V, Kanagaraj D, Baratin F, Purna Bollu Y, Augustyns , Bodicherla K, Delanghe H, Armishaw L (2024). admiralvaccine: Vaccine Extension Package ADaM 'R' Asset Library. https://pharmaverse.github.io/admiralvaccine/, https://github.com/pharmaverse/admiralvaccine/.","code":"@Manual{,   title = {admiralvaccine: Vaccine Extension Package for ADaM in 'R' Asset Library},   author = {Sukalpo Saha and Arjun Rubalingam and Ben Straub and Vikram S and Dhivya Kanagaraj and Federico Baratin and Yamini {Purna Bollu} and Ilse Augustyns and Kalyani Bodicherla and Hilde Delanghe and Lee Armishaw},   year = {2024},   note = {https://pharmaverse.github.io/admiralvaccine/, https://github.com/pharmaverse/admiralvaccine/}, }"},{"path":"https://pharmaverse.github.io/admiralvaccine/index.html","id":"admiral-extension-for-vaccines-","dir":"","previous_headings":"","what":"Vaccine Extension Package for ADaM in R Asset Library","title":"Vaccine Extension Package for ADaM in R Asset Library","text":"Vaccine extension package ADaM R Asset Library admiral","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Vaccine Extension Package for ADaM in R Asset Library","text":"provide complementary (admiral) toolbox enables users develop vaccine specific domains.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vaccine Extension Package for ADaM in R Asset Library","text":"package available CRAN can installed running install.packages(\"admiralvaccine\"). install latest development version package directly GitHub use following code:","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") }  remotes::install_github(\"pharmaverse/admiraldev\", ref = \"devel\") # This is a required dependency of {admiralvaccine} remotes::install_github(\"pharmaverse/admiral\", ref = \"devel\") # This is a required dependency of {admiralvaccine} remotes::install_github(\"pharmaverse/admiralvaccine\", ref = \"devel\")"},{"path":"https://pharmaverse.github.io/admiralvaccine/index.html","id":"dependencies","dir":"","previous_headings":"Installation","what":"Dependencies","title":"Vaccine Extension Package for ADaM in R Asset Library","text":"latest version package works latest versions packages stated DESCRIPTION. previous version package used, recommended use latest version dependencies point time previous version {admiralvaccine} released.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/index.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Vaccine Extension Package for ADaM in R Asset Library","text":"Build toolbox re-usable functions utilities create vaccine-specific ADaM datasets R modular manner. functions created based upon ADaM Implementation Guide aim facilitate programming ADaM dataset standards. Initially package focus creating reactogenicity immunogenicity domain following flat model per Center Biologics Evaluation Research (CBER) guidelines.future make enhancements get updates Center Biologics Evaluation Research (CBER).","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/index.html","id":"expectations","dir":"","previous_headings":"","what":"Expectations","title":"Vaccine Extension Package for ADaM in R Asset Library","text":"admiralvaccine expected complement admiral provide functions help creation efficacy endpoints required vaccine ADaMs.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/index.html","id":"references-and-documentation","dir":"","previous_headings":"","what":"References and Documentation","title":"Vaccine Extension Package for ADaM in R Asset Library","text":"Please refer {admiral} References Documentation","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/index.html","id":"r-versions","dir":"","previous_headings":"","what":"R Versions","title":"Vaccine Extension Package for ADaM in R Asset Library","text":"’s summary strategy package related R versions: R versions developers users follow admiral core package. development devel branch admiral core used dependency. releasing new admiralvaccine version must run using latest released admiral core version, .e., main branch admiral core.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Vaccine Extension Package for ADaM in R Asset Library","text":"use following support communications user developer community: Slack - informal discussions, Q&building user community. don’t access, use link join pharmaverse Slack workspace GitHub Issues - direct feedback, enhancement requests raising bugs","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/index.html","id":"admiralvaccine-r-package-collaboration-pfizer-gsk-and-jj","dir":"","previous_headings":"","what":"{admiralvaccine} R Package Collaboration: Pfizer, GSK and J&J","title":"Vaccine Extension Package for ADaM in R Asset Library","text":"Project Lead & Contributor: Neetu Sangari Maintainer: Sukalpo Saha Developers: Vikram S, Arjun Rubalingam, Dhivya Kanagaraj, Federico Baratin, Yamini Purna Bollu, Ilse Augustyns, Kalyani Bodicherla Support lead & Reviewer: Ben Straub Reviewers: Stefan Bundfuss, Edoardo Mancini Contributors: Ross Farrugia, Abdul Khayat, Jayashree V, Jagadish Katam, Ankur Jindal, Andrea Pammolli, Daniele Bottigliengo, Ranya Ben Hsain, Lee Armishaw, Hilde Delanghe, Marleen Nijs, Mandy Peng, Tina Zhai","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine-package.html","id":null,"dir":"Reference","previous_headings":"","what":"admiralvaccine: Vaccine Extension Package for ADaM in 'R' Asset Library — admiralvaccine-package","title":"admiralvaccine: Vaccine Extension Package for ADaM in 'R' Asset Library — admiralvaccine-package","text":"Programming vaccine specific Clinical Data Interchange Standards Consortium (CDISC) compliant Analysis Data Model (ADaM) datasets 'R'. Flat model followed per Center Biologics Evaluation Research (CBER) guidelines creating vaccine specific domains. ADaM datasets mandatory part New Drug Biologics License Application submitted United States Food Drug Administration (FDA). Analysis derivations implemented accordance \"Analysis Data Model Implementation Guide\" (CDISC Analysis Data Model Team (2021), https://www.cdisc.org/standards/foundational/adam/adamig-v1-3-release-package). package extension package 'admiral' package.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"admiralvaccine: Vaccine Extension Package for ADaM in 'R' Asset Library — admiralvaccine-package","text":"Maintainer: Sukalpo Saha sukalpo.saha@pfizer.com Authors: Arjun Rubalingam arjun.rubalingam@pfizer.com Ben Straub ben.x.straub@gsk.com Vikram S Dhivya Kanagaraj Federico Baratin Yamini Purna Bollu Ilse Augustyns Kalyani Bodicherla Hilde Delanghe Lee Armishaw contributors: Neetu Sangari [contributor] Abdul Khayat [contributor] Ankur Jindal [contributor] Jayashree V [contributor] Jagadish Katam [contributor] Andrea Pammolli [contributor] Daniele Bottigliengo [contributor] Ranya Ben Hsain [contributor] Marleen Nijs [contributor] Mandy Peng [contributor] Tina Zhai [contributor] Ross Farrugia [contributor] Stefan Bundfuss [contributor] Edoardo Mancini [contributor] Pfizer Inc. [copyright holder, funder] GlaxoSmithKline LLC [copyright holder, funder] Johnson & Johnson [copyright holder, funder]","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adce.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical Events Analysis Dataset - Vaccine Specific — admiralvaccine_adce","title":"Clinical Events Analysis Dataset - Vaccine Specific — admiralvaccine_adce","text":"example Clinical Events analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical Events Analysis Dataset - Vaccine Specific — admiralvaccine_adce","text":"","code":"admiralvaccine_adce"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical Events Analysis Dataset - Vaccine Specific — admiralvaccine_adce","text":"object class tbl_df (inherits tbl, data.frame) 44 rows 56 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adce.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical Events Analysis Dataset - Vaccine Specific — admiralvaccine_adce","text":"(https://github.com/pharmaverse/admiralvaccine/blob/main/inst/templates/ad_adce.R)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adface.html","id":null,"dir":"Reference","previous_headings":"","what":"Findings About Clinical Events Analysis Dataset - Vaccine Specific — admiralvaccine_adface","title":"Findings About Clinical Events Analysis Dataset - Vaccine Specific — admiralvaccine_adface","text":"example Findings Clinical Events analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Findings About Clinical Events Analysis Dataset - Vaccine Specific — admiralvaccine_adface","text":"","code":"admiralvaccine_adface"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adface.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Findings About Clinical Events Analysis Dataset - Vaccine Specific — admiralvaccine_adface","text":"object class tbl_df (inherits tbl, data.frame) 371 rows 60 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adface.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Findings About Clinical Events Analysis Dataset - Vaccine Specific — admiralvaccine_adface","text":"(https://github.com/pharmaverse/admiralvaccine/blob/main/inst/templates/ad_adface.R)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adis.html","id":null,"dir":"Reference","previous_headings":"","what":"Immunogenicity Specimen Assessments Analysis Dataset - Vaccine Specific — admiralvaccine_adis","title":"Immunogenicity Specimen Assessments Analysis Dataset - Vaccine Specific — admiralvaccine_adis","text":"example Immunogenicity Specimen Assessments analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Immunogenicity Specimen Assessments Analysis Dataset - Vaccine Specific — admiralvaccine_adis","text":"","code":"admiralvaccine_adis"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Immunogenicity Specimen Assessments Analysis Dataset - Vaccine Specific — admiralvaccine_adis","text":"object class tbl_df (inherits tbl, data.frame) 64 rows 102 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adis.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Immunogenicity Specimen Assessments Analysis Dataset - Vaccine Specific — admiralvaccine_adis","text":"(https://github.com/pharmaverse/admiralvaccine/blob/main/inst/templates/ad_adis.R)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Subject Level Analysis Dataset - Vaccine Specific — admiralvaccine_adsl","title":"Subject Level Analysis Dataset - Vaccine Specific — admiralvaccine_adsl","text":"example Subject Level analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subject Level Analysis Dataset - Vaccine Specific — admiralvaccine_adsl","text":"","code":"admiralvaccine_adsl"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adsl.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subject Level Analysis Dataset - Vaccine Specific — admiralvaccine_adsl","text":"object class tbl_df (inherits tbl, data.frame) 2 rows 46 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/admiralvaccine_adsl.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Subject Level Analysis Dataset - Vaccine Specific — admiralvaccine_adsl","text":"(https://github.com/pharmaverse/admiralvaccine/blob/main/inst/templates/ad_adsl.R)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_diam_to_sev_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating Severity Records From Diameter — derive_diam_to_sev_records","title":"Creating Severity Records From Diameter — derive_diam_to_sev_records","text":"derive severity records diameter records.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_diam_to_sev_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating Severity Records From Diameter — derive_diam_to_sev_records","text":"","code":"derive_diam_to_sev_records(   dataset,   diam_code = \"DIAMETER\",   faobj_values = c(\"REDNESS\", \"SWELLING\"),   testcd_sev = \"SEV\",   test_sev = \"Severity/Intensity\",   none = 0,   mild = 2,   mod = 5,   sev = 10 )"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_diam_to_sev_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating Severity Records From Diameter — derive_diam_to_sev_records","text":"dataset Input data set variables USUBJID,FAOBJ,AVAL, AVALC, FATESTCD FATEST expected Input data set. diam_code Diameter record filter Permitted Value: character vector scalar. Helps filter diameter records derive severity records passing FATESTCD value diameter corresponding specified events faobj_values. faobj_values Event filter Permitted Value: character vector Scalar. Helps filter events (Redness Swelling) diameter records derive severity records passing events FAOBJ. testcd_sev assign FATESTCD value severity Permitted Value: character scalar Assign value FATESTCD variable indicate severity records. Ignore argument want set default value (SEV). test_sev FATEST Value severity Permitted Value: Character scalar Assign value FATEST variable indicate severity records. Ignore argument want set default value. none Pass lower limit grade \"NONE\" Permitted Value: numeric vector none following arguments (mild, mode sev) used assigning diameter limit derive AVALC (severity grade). Assign lower limit derive Severity Grade (AVALC).Example: User passing 0 none 2 mild, 0 act lower limit 2 act upper limit. Note: Use limit reference pass values argumentsSince condition coded like ,NONE : none < AVAL <= mildMILD : mild < AVAL <= modMODERATE : mod < AVAL <= sevSEVERE : sev < AVALUser pass values numeric scalar. Refer default values. mild Pass lower limit grade \"MILD\" Permitted Value: numeric vector mod Pass lower limit grade \"MODERATE\" Permitted Value: numeric vector sev Pass lower limit grade \"SEVERE\" Permitted Value: numeric vector","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_diam_to_sev_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating Severity Records From Diameter — derive_diam_to_sev_records","text":"Input data new severity records Redness swelling specified faobj_values AVAL, AVALC derived FATESTCD, FATEST changed per values.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_diam_to_sev_records.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Creating Severity Records From Diameter — derive_diam_to_sev_records","text":"Basically, function derive create severity records diameter record particular events specified faobj_values user wants. want derive Severity diameter, even though severity SDTM data. function re-derive severity remove derived SDTM severity records.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_diam_to_sev_records.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creating Severity Records From Diameter — derive_diam_to_sev_records","text":"Arjun Rubalingam","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_diam_to_sev_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating Severity Records From Diameter — derive_diam_to_sev_records","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(admiral) library(tibble)  input <- tribble(   ~USUBJID, ~FAOBJ, ~AVAL, ~AVALC, ~ATPTREF, ~FATEST, ~FATESTCD,   \"XYZ1001\", \"REDNESS\", 7.5, \"7.5\", \"VACCINATION 1\", \"Diameter\", \"DIAMETER\",   \"XYZ1001\", \"REDNESS\", 3.5, \"3.5\", \"VACCINATION 1\", \"Diameter\", \"DIAMETER\",   \"XYZ1001\", \"REDNESS\", 2, \"2\", \"VACCINATION 1\", \"Diameter\", \"DIAMETER\",   \"XYZ1001\", \"REDNESS\", 1.8, \"1.8\", \"VACCINATION 1\", \"Diameter\", \"DIAMETER\",   \"XYZ1001\", \"REDNESS\", 1.4, \"1.4\", \"VACCINATION 1\", \"Diameter\", \"DIAMETER\",   \"XYZ1002\", \"REDNESS\", 11.1, \"11.1\", \"VACCINATION 2\", \"Diameter\", \"DIAMETER\",   \"XYZ1002\", \"REDNESS\", 7.4, \"7.4\", \"VACCINATION 2\", \"Diameter\", \"DIAMETER\",   \"XYZ1002\", \"REDNESS\", 6, \"6\", \"VACCINATION 2\", \"Diameter\", \"DIAMETER\",   \"XYZ1002\", \"REDNESS\", 2.1, \"2.1\", \"VACCINATION 2\", \"Diameter\", \"DIAMETER\",   \"XYZ1002\", \"REDNESS\", 1.1, \"1.1\", \"VACCINATION 2\", \"Diameter\", \"DIAMETER\",   \"XYZ1001\", \"SWELLING\", 5.5, \"5.5\", \"VACCINATION 1\", \"Diameter\", \"DIAMETER\",   \"XYZ1001\", \"SWELLING\", 2.5, \"2.5\", \"VACCINATION 1\", \"Diameter\", \"DIAMETER\",   \"XYZ1001\", \"SWELLING\", 2, \"2\", \"VACCINATION 1\", \"Diameter\", \"DIAMETER\",   \"XYZ1001\", \"SWELLING\", 1.8, \"1.8\", \"VACCINATION 1\", \"Diameter\", \"DIAMETER\",   \"XYZ1001\", \"SWELLING\", 1.4, \"1.4\", \"VACCINATION 1\", \"Diameter\", \"DIAMETER\",   \"XYZ1002\", \"SWELLING\", 10.1, \"10.1\", \"VACCINATION 2\", \"Diameter\", \"DIAMETER\",   \"XYZ1002\", \"SWELLING\", 7.1, \"7.1\", \"VACCINATION 2\", \"Diameter\", \"DIAMETER\",   \"XYZ1002\", \"SWELLING\", 5, \"5\", \"VACCINATION 2\", \"Diameter\", \"DIAMETER\",   \"XYZ1002\", \"SWELLING\", 1.8, \"1.8\", \"VACCINATION 2\", \"Diameter\", \"DIAMETER\",   \"XYZ1002\", \"SWELLING\", 1.4, \"1.4\", \"VACCINATION 2\", \"Diameter\", \"DIAMETER\" )  derive_diam_to_sev_records(   dataset = input,   faobj_values = c(\"REDNESS\", \"SWELLING\"),   diam_code = \"DIAMETER\",   testcd_sev = \"SEV\",   test_sev = \"Severity\" ) #> # A tibble: 40 × 8 #>    USUBJID FAOBJ    AVAL AVALC    ATPTREF       FATEST   FATESTCD FASEQ #>    <chr>   <chr>   <dbl> <chr>    <chr>         <chr>    <chr>    <int> #>  1 XYZ1001 REDNESS     2 MODERATE VACCINATION 1 Severity SEV         NA #>  2 XYZ1001 REDNESS     1 MILD     VACCINATION 1 Severity SEV         NA #>  3 XYZ1001 REDNESS     0 NONE     VACCINATION 1 Severity SEV         NA #>  4 XYZ1001 REDNESS     0 NONE     VACCINATION 1 Severity SEV         NA #>  5 XYZ1001 REDNESS     0 NONE     VACCINATION 1 Severity SEV         NA #>  6 XYZ1002 REDNESS     3 SEVERE   VACCINATION 2 Severity SEV         NA #>  7 XYZ1002 REDNESS     2 MODERATE VACCINATION 2 Severity SEV         NA #>  8 XYZ1002 REDNESS     2 MODERATE VACCINATION 2 Severity SEV         NA #>  9 XYZ1002 REDNESS     1 MILD     VACCINATION 2 Severity SEV         NA #> 10 XYZ1002 REDNESS     0 NONE     VACCINATION 2 Severity SEV         NA #> # ℹ 30 more rows"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_fever_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating Fever Records — derive_fever_records","title":"Creating Fever Records — derive_fever_records","text":"Creating Fever records VS SDTM dataset.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_fever_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating Fever Records — derive_fever_records","text":"","code":"derive_fever_records(dataset, dataset_source, filter_source, faobj)"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_fever_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating Fever Records — derive_fever_records","text":"dataset Input Dataset Input dataset expected variables USUBJID FAOBJ. dataset_source Source Dataset - SDTM Vital Sign (VS) Source Dataset (VS) expected temperature records. filter_source Filter condition Source dataset. faobj FAOBJ Value fever records output dataset.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_fever_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating Fever Records — derive_fever_records","text":"output dataset contains records FATESTCD = \"OCCUR\" FAOBJ = FEVER records.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_fever_records.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating Fever Records — derive_fever_records","text":"Check FAOBJ = FEVER record present input dataset, use SDTM.VS get FEVER records. temperature values VSSTRESN decide FEVER occurred (FAORRES = \"Y\"/\"N\"). Since records derived, FEVER records considered DTYPE = \"DERIVED\" FAOBJ = FEVER record present, input dataset made output analysis. temperature value greater equal 38° C considered FEVER records.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_fever_records.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creating Fever Records — derive_fever_records","text":"Dhivya Kanagaraj","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_fever_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating Fever Records — derive_fever_records","text":"","code":"library(tibble) library(dplyr) library(admiraldev) #>  #> Attaching package: ‘admiraldev’ #> The following objects are masked from ‘package:dplyr’: #>  #>     anti_join, filter_if, inner_join, left_join library(admiral)  input <- tribble(   ~USUBJID, ~FAOBJ, ~FATESTCD, ~FACAT, ~FASCAT, ~FATPT,   \"ABC101\", \"REDNESS\", \"SEV\", \"REACTOGENICITY\", \"ADMINISTRATIVE SITE\", \"DAY 1\",   \"ABC101\", \"REDNESS\", \"DIAM\", \"REACTOGENICITY\", \"ADMINISTRATIVE SITE\", \"DAY 2\",   \"ABC101\", \"VOMITTING\", \"SEV\", \"REACTOGENICITY\", \"SYSTEMIC\", \"DAY 1\",   \"ABC101\", \"FATIQUE\", \"OCCUR\", \"REACTOGENICITY\", \"SYSTEMIC\", \"DAY 3\" )  vs <- tribble(   ~USUBJID, ~VSTESTCD, ~VSCAT, ~VSSTRESN, ~VSSTRESU, ~VSTPT,   \"ABC101\", \"TEMP\", \"REACTOGENICITY\", 38.3, \"C\", \"DAY 1\",   \"ABC101\", \"TEMP\", \"REACTOGENICITY\", 38, \"C\", \"DAY 2\",   \"ABC101\", \"TEMP\", \"REACTOGENICITY\", 36, \"C\", \"DAY 3\",   \"ABC101\", \"TEMP\", \"REACTOGENICITY\", 37, \"C\", \"DAY 4\",   \"ABC101\", \"TEMP\", \"REACTOGENICITY\", 39, \"C\", \"DAY 5\",   \"ABC101\", \"TEMP\", \"REACTOGENICITY\", 39, \"C\", \"DAY 6\",   \"ABC101\", \"TEMP\", \"REACTOGENICITY\", 38, \"C\", \"DAY 7\" )  derive_fever_records(   dataset = input,   dataset_source = vs,   filter_source = VSCAT == \"REACTOGENICITY\" & VSTESTCD == \"TEMP\",   faobj = \"FEVER\" ) #> # A tibble: 11 × 10 #>    USUBJID FAOBJ    FATESTCD FACAT FASCAT FATPT FATEST FAORRES FASTRESC VSSTRESN #>    <chr>   <chr>    <chr>    <chr> <chr>  <chr> <chr>  <chr>   <chr>       <dbl> #>  1 ABC101  REDNESS  SEV      REAC… ADMIN… DAY 1 NA     NA      NA           NA   #>  2 ABC101  REDNESS  DIAM     REAC… ADMIN… DAY 2 NA     NA      NA           NA   #>  3 ABC101  VOMITTI… SEV      REAC… SYSTE… DAY 1 NA     NA      NA           NA   #>  4 ABC101  FATIQUE  OCCUR    REAC… SYSTE… DAY 3 NA     NA      NA           NA   #>  5 ABC101  FEVER    OCCUR    REAC… SYSTE… DAY 1 Occur… Y       Y            38.3 #>  6 ABC101  FEVER    OCCUR    REAC… SYSTE… DAY 2 Occur… Y       Y            38   #>  7 ABC101  FEVER    OCCUR    REAC… SYSTE… DAY 3 Occur… N       N            36   #>  8 ABC101  FEVER    OCCUR    REAC… SYSTE… DAY 4 Occur… N       N            37   #>  9 ABC101  FEVER    OCCUR    REAC… SYSTE… DAY 5 Occur… Y       Y            39   #> 10 ABC101  FEVER    OCCUR    REAC… SYSTE… DAY 6 Occur… Y       Y            39   #> 11 ABC101  FEVER    OCCUR    REAC… SYSTE… DAY 7 Occur… Y       Y            38"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_var_aval_adis.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive AVAL variable for ADIS ADaM domain — derive_var_aval_adis","title":"Derive AVAL variable for ADIS ADaM domain — derive_var_aval_adis","text":"Derive AVAL variable Laboratory Immunology Data ADaM domain. common rule decided derivation, based ISLLOQ, ISULOQ ISORRES ISLLOQ ISULOQ present. ISULOQ present, variables used ISLLOQ ISORRES. Please, refers arguments description additional details.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_var_aval_adis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive AVAL variable for ADIS ADaM domain — derive_var_aval_adis","text":"","code":"derive_var_aval_adis(   dataset,   lower_rule,   middle_rule,   upper_rule = NULL,   round = NULL )"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_var_aval_adis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive AVAL variable for ADIS ADaM domain — derive_var_aval_adis","text":"dataset Input dataset. lower_rule Derivation rule ISSTRESN value ISLLOQ. ISSTRESN missing, inequality ISORRES checked derivation. middle_rule Derivation rule ISSTRESN value greater ISLLOQ lower ISULOQ. ISULOQ present, derivation rule ISSTRESN greater ISLLOQ. ISSTRESN missing, inequality ISORRES checked derivation. upper_rule Derivation rule ISSTRESN value greater ISULOQ. optional argument since ISULOQ may present. ISSTRESN missing, inequality ISORRES. checked derivation. Default value NULL. round Rounding AVAL variable. integer argument specifies number decimals displayed. Default value NULL.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_var_aval_adis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive AVAL variable for ADIS ADaM domain — derive_var_aval_adis","text":"Dataset AVAL variable derived.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_var_aval_adis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Derive AVAL variable for ADIS ADaM domain — derive_var_aval_adis","text":"Federico Baratin","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_var_aval_adis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive AVAL variable for ADIS ADaM domain — derive_var_aval_adis","text":"","code":"library(tibble) library(admiral) library(admiraldev) library(dplyr) library(rlang) #>  #> Attaching package: ‘rlang’ #> The following object is masked from ‘package:admiraldev’: #>  #>     is_named  input <- tribble(   ~USUBJID, ~AVISITN, ~PARAMCD, ~PARAM, ~ISORRES, ~ISSTRESN, ~ISLLOQ, ~ISULOQ,   \"ABC-1001\", 10, \"J0033VN\", \"J0033VN Antibody\", NA, NA, 2, 100,   \"ABC-1001\", 10, \"I0019NT\", \"I0019NT Antibody\", \"3\", 3.0, 4, 200,   \"ABC-1001\", 10, \"M0019LN\", \"M0019LN Antibody\", \">150\", NA, 8, 150,   \"ABC-1001\", 10, \"R0003MA\", \"R0003MA Antibody\", \"140.5\", 140.5, 4, 120,   \"ABC-1001\", 30, \"J0033VN\", \"J0033VN Antibody\", \"2\", 2.0, 2, 100,   \"ABC-1001\", 30, \"I0019NT\", \"I0019NT Antibody\", NA, NA, 4, 200,   \"ABC-1001\", 30, \"M0019LN\", \"M0019LN Antibody\", NA, NA, 8, 150,   \"ABC-1001\", 30, \"R0003MA\", \"R0003MA Antibody\", \"98.2\", 98.2, 4, 120,   \"ABC-1001\", 10, \"J0033VNL\", \"LOG10 (J0033VN Antibody)\", NA, NA, 2, 100,   \"ABC-1001\", 10, \"I0019NTL\", \"LOG10 (I0019NT Antibody)\", \"3\", 3.0, 4, 200,   \"ABC-1001\", 10, \"M0019LNL\", \"LOG10 (M0019LN Antibody)\", \">150\", NA, 8, 150,   \"ABC-1001\", 10, \"R0003MAL\", \"LOG10 (R0003MA Antibody)\", \"140.5\", 140.5, 4, 120,   \"ABC-1001\", 30, \"J0033VNL\", \"LOG10 (J0033VN Antibody)\", \"2\", 2.0, 2, 100,   \"ABC-1001\", 30, \"I0019NTL\", \"LOG10 (I0019NT Antibody)\", NA, NA, 4, 200,   \"ABC-1001\", 30, \"M0019LNL\", \"LOG10 (M0019LN Antibody)\", NA, NA, 8, 150,   \"ABC-1001\", 30, \"R0003MAL\", \"LOG10 (R0003MA Antibody)\", \"98.2\", 98.2, 4, 120,   \"ABC-1002\", 10, \"J0033VN\", \"J0033VN Antibody\", \"3\", 3.0, 2, 100,   \"ABC-1002\", 10, \"I0019NT\", \"I0019NT Antibody\", NA, NA, 4, 200,   \"ABC-1002\", 10, \"M0019LN\", \"M0019LN Antibody\", NA, NA, 8, 150,   \"ABC-1002\", 10, \"R0003MA\", \"R0003MA Antibody\", \"48.9\", 48.9, 4, 120,   \"ABC-1002\", 30, \"J0033VN\", \"J0033VN Antibody\", NA, NA, 2, 100,   \"ABC-1002\", 30, \"I0019NT\", \"I0019NT Antibody\", NA, NA, 4, 200,   \"ABC-1002\", 30, \"M0019LN\", \"M0019LN Antibody\", \"5\", 5.0, 8, 150,   \"ABC-1002\", 30, \"R0003MA\", \"R0003MA Antibody\", \"228.1\", 228.1, 4, 120 )  derive_var_aval_adis(   dataset = input,   lower_rule = ISLLOQ / 2,   middle_rule = ISSTRESN,   upper_rule = ISULOQ,   round = 2 ) #> # A tibble: 24 × 9 #>    USUBJID  AVISITN PARAMCD  PARAM          ISORRES ISSTRESN ISLLOQ ISULOQ  AVAL #>    <chr>      <dbl> <chr>    <chr>          <chr>      <dbl>  <dbl>  <dbl> <dbl> #>  1 ABC-1001      10 J0033VN  J0033VN Antib… NA          NA        2    100  NA   #>  2 ABC-1001      10 I0019NT  I0019NT Antib… 3            3        4    200   2   #>  3 ABC-1001      10 M0019LN  M0019LN Antib… >150        NA        8    150 150   #>  4 ABC-1001      10 R0003MA  R0003MA Antib… 140.5      140.       4    120 120   #>  5 ABC-1001      30 J0033VN  J0033VN Antib… 2            2        2    100   2   #>  6 ABC-1001      30 I0019NT  I0019NT Antib… NA          NA        4    200  NA   #>  7 ABC-1001      30 M0019LN  M0019LN Antib… NA          NA        8    150  NA   #>  8 ABC-1001      30 R0003MA  R0003MA Antib… 98.2        98.2      4    120  98.2 #>  9 ABC-1001      10 J0033VNL LOG10 (J0033V… NA          NA        2    100  NA   #> 10 ABC-1001      10 I0019NTL LOG10 (I0019N… 3            3        4    200   2   #> # ℹ 14 more rows"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_crit.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Analysis Criterion Evaluation Variables — derive_vars_crit","title":"Derive Analysis Criterion Evaluation Variables — derive_vars_crit","text":"Derive analysis criterion evaluation result variable, paired character numeric flags. function allows also derivation CRIT like variable different name (ex: ANL01FL), without generating additional numeric (ex: ANL01FN) character label (ex: ANL01) variables.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_crit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Analysis Criterion Evaluation Variables — derive_vars_crit","text":"","code":"derive_vars_crit(dataset, prefix, crit_label, condition, criterion)"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_crit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Analysis Criterion Evaluation Variables — derive_vars_crit","text":"dataset Input dataset prefix Variables add analysis criterion evaluation variable's name (.e., CRIT1) name also used order create character numeric flags variables (.e., CRIT1FL CRIT1FN). name contain CRIT wording, generates flag variable (ex: ANL01FL) whose logic equals CRIT1 variable, without generating additional numeric (ex: ANL01FN) character (ANL01) variables. crit_label Criterion value text description defining condition necessary satisfy presence criterion condition Condition selecting subset condition specified order select subset input dataset rule applied. criterion Criterion rule criterion selected row satisfies . Returns Y N character variable 1 0 numeric variable criterion met , respectively. Returns NA selected rows (taken account condition)","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_crit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Analysis Criterion Evaluation Variables — derive_vars_crit","text":"Dataset criterion variables","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_crit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Derive Analysis Criterion Evaluation Variables — derive_vars_crit","text":"Federico Baratin","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_crit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Analysis Criterion Evaluation Variables — derive_vars_crit","text":"","code":"library(tibble) library(admiral) library(admiraldev) library(dplyr)  input <- tribble(   ~USUBJID, ~AVISITN, ~ISCAT, ~PARAMCD, ~AVAL, ~ISLLOQ,   \"999999-000001\", 10, \"IMMUNOLOGY\", \"J0033VN\", 2, 4,   \"999999-000001\", 10, \"IMMUNOLOGY\", \"I0019NT\", 3, 6,   \"999999-000001\", 10, \"IMMUNOLOGY\", \"M0019LN\", 4, 4,   \"999999-000001\", 10, \"IMMUNOLOGY\", \"R0003MA\", 3, 6,   \"999999-000001\", 30, \"IMMUNOLOGY\", \"J0033VN\", 60, 4,   \"999999-000001\", 30, \"IMMUNOLOGY\", \"I0019NT\", 567, 6,   \"999999-000001\", 30, \"IMMUNOLOGY\", \"M0019LN\", 659, 4,   \"999999-000001\", 30, \"IMMUNOLOGY\", \"R0003MA\", 250, 6,   \"999999-000002\", 10, \"IMMUNOLOGY\", \"J0033VN\", 2, 4,   \"999999-000002\", 10, \"IMMUNOLOGY\", \"I0019NT\", 7, 6,   \"999999-000002\", 10, \"IMMUNOLOGY\", \"M0019LN\", 5, 4,   \"999999-000002\", 10, \"IMMUNOLOGY\", \"R0003MA\", 3, 6,   \"999999-000002\", 30, \"IMMUNOLOGY\", \"J0033VN\", 55, 4,   \"999999-000002\", 30, \"IMMUNOLOGY\", \"I0019NT\", 89, 6,   \"999999-000002\", 30, \"IMMUNOLOGY\", \"M0019LN\", 990, 4,   \"999999-000002\", 30, \"IMMUNOLOGY\", \"R0003MA\", 340, 6,   \"999999-000003\", 10, \"IMMUNOLOGY\", \"J0033VN\", 3, 4,   \"999999-000003\", 10, \"IMMUNOLOGY\", \"I0019NT\", 6, 6,   \"999999-000003\", 10, \"IMMUNOLOGY\", \"M0019LN\", 2, 4,   \"999999-000003\", 10, \"IMMUNOLOGY\", \"R0003MA\", 2, 6,   \"999999-000003\", 30, \"IMMUNOLOGY\", \"J0033VN\", 45, 4,   \"999999-000003\", 30, \"IMMUNOLOGY\", \"I0019NT\", 381, 6,   \"999999-000003\", 30, \"IMMUNOLOGY\", \"M0019LN\", 542, 4,   \"999999-000003\", 30, \"IMMUNOLOGY\", \"R0003MA\", NA, 6 )   derive_vars_crit(   dataset = input,   prefix = \"CRIT1\",   crit_label = \"Titer >= ISLLOQ\",   condition = !is.na(AVAL) & !is.na(ISLLOQ),   criterion = AVAL >= ISLLOQ ) #> # A tibble: 24 × 9 #>    USUBJID       AVISITN ISCAT      PARAMCD  AVAL ISLLOQ CRIT1FL CRIT1FN CRIT1   #>    <chr>           <dbl> <chr>      <chr>   <dbl>  <dbl> <chr>     <dbl> <chr>   #>  1 999999-000001      10 IMMUNOLOGY J0033VN     2      4 N             0 Titer … #>  2 999999-000001      10 IMMUNOLOGY I0019NT     3      6 N             0 Titer … #>  3 999999-000001      10 IMMUNOLOGY M0019LN     4      4 Y             1 Titer … #>  4 999999-000001      10 IMMUNOLOGY R0003MA     3      6 N             0 Titer … #>  5 999999-000001      30 IMMUNOLOGY J0033VN    60      4 Y             1 Titer … #>  6 999999-000001      30 IMMUNOLOGY I0019NT   567      6 Y             1 Titer … #>  7 999999-000001      30 IMMUNOLOGY M0019LN   659      4 Y             1 Titer … #>  8 999999-000001      30 IMMUNOLOGY R0003MA   250      6 Y             1 Titer … #>  9 999999-000002      10 IMMUNOLOGY J0033VN     2      4 N             0 Titer … #> 10 999999-000002      10 IMMUNOLOGY I0019NT     7      6 Y             1 Titer … #> # ℹ 14 more rows"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_event_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds Flag Variables for an Occurred Event . — derive_vars_event_flag","title":"Adds Flag Variables for an Occurred Event . — derive_vars_event_flag","text":"Creates two flag variables event occurred, one event occurred within group one flag event occurred day.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_event_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds Flag Variables for an Occurred Event . — derive_vars_event_flag","text":"","code":"derive_vars_event_flag(   dataset,   by_vars,   aval_cutoff,   new_var1 = NULL,   new_var2 = NULL )"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_event_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds Flag Variables for an Occurred Event . — derive_vars_event_flag","text":"dataset Input dataset variables specified by_vars argument expected. by_vars Grouping variables variables considered grouping creating new variable new_var1 aval_cutoff Cutoff value AVAL TESTCD code list values based diameter, AVAL greater aval_cutoff event considered occurred. example, aval_cutoff = 2.5 subjects AVAL value greater 2.5 considered. new_var1 Name new flag variable 1   new_var2 Name new flag variable 2.","code":"A new flag variable will be created with values `Y` or `N`. If the event is occurred at least once during a observation period for a subject then the new variable will be flagged as `Y` otherwise `N`. A new flag variable will be created with values `Y` or `N`. If the event is occurred on the particular day then the new variable will be flagged as `Y` otherwise `N`."},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_event_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds Flag Variables for an Occurred Event . — derive_vars_event_flag","text":"dataset flag variables added .","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_event_flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds Flag Variables for an Occurred Event . — derive_vars_event_flag","text":"event considered occurred AVAL greater aval_cutoff AVALC values Y, MILD, MODERATE, SEVERE. cases, event considered occurred. names new flag variables created sponsor specific. new_var1 flag observations \"Y\" within group event occurred least observation period. event occurred observation period observations within group flagged \"N\". derived maximum records FATESTCD , new_var2 set NA. new_var1 new_var2 NULL, function return input dataset output dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_event_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds Flag Variables for an Occurred Event . — derive_vars_event_flag","text":"","code":"library(tibble) library(admiral) library(dplyr)  input <- tribble(   ~USUBJID, ~FAOBJ, ~ATPTREF, ~AVAL, ~AVALC, ~FATEST, ~FATESTCD, ~FASCAT,   \"1\", \"REDNESS\", \"VAC1\", 3.5, \"3.5\", \"Diameter\", \"DIAMETER\", \"ADMIN-SITE\",   \"1\", \"REDNESS\", \"VAC1\", 4.5, \"4.5\", \"Diameter\", \"DIAMETER\", \"ADMIN-SITE\",   \"1\", \"REDNESS\", \"VAC1\", 1.5, \"1.5\", \"Diameter\", \"DIAMETER\", \"ADMIN-SITE\",   \"1\", \"REDNESS\", \"VAC1\", 4.5, \"4.5\", \"Diameter\", \"DIAMETER\", \"ADMIN-SITE\",   \"1\", \"FATIGUE\", \"VAC1\", 1, \"MILD\", \"Severity\", \"SEV\", \"SYSTEMIC\",   \"1\", \"FATIGUE\", \"VAC1\", 2, \"MODERATE\", \"Severity\", \"SEV\", \"SYSTEMIC\",   \"1\", \"FATIGUE\", \"VAC1\", 0, \"NONE\", \"Severity\", \"SEV\", \"SYSTEMIC\",   \"1\", \"FATIGUE\", \"VAC1\", 2, \"MODERATE\", \"Severity\", \"SEV\", \"SYSTEMIC\",   \"1\", \"REDNESS\", \"VAC2\", 6.5, \"6.5\", \"Diameter\", \"DIAMETER\", \"ADMIN-SITE\",   \"1\", \"REDNESS\", \"VAC2\", 7.5, \"7.5\", \"Diameter\", \"DIAMETER\", \"ADMIN-SITE\",   \"1\", \"REDNESS\", \"VAC2\", 2.5, \"2.5\", \"Diameter\", \"DIAMETER\", \"ADMIN-SITE\",   \"1\", \"REDNESS\", \"VAC2\", 7.5, \"7.5\", \"Diameter\", \"DIAMETER\", \"ADMIN-SITE\",   \"1\", \"FATIGUE\", \"VAC2\", 1, \"MILD\", \"Severity\", \"SEV\", \"SYSTEMIC\",   \"1\", \"FATIGUE\", \"VAC2\", 2, \"MODERATE\", \"Severity\", \"SEV\", \"SYSTEMIC\",   \"1\", \"FATIGUE\", \"VAC2\", 0, \"NONE\", \"Severity\", \"SEV\", \"SYSTEMIC\",   \"1\", \"FATIGUE\", \"VAC2\", 2, \"MODERATE\", \"Severity\", \"SEV\", \"SYSTEMIC\", )  derive_vars_event_flag(   dataset = input,   by_vars = exprs(USUBJID, FAOBJ, ATPTREF),   aval_cutoff = 2.5,   new_var1 = EVENTL,   new_var2 = EVENTDL ) #> # A tibble: 16 × 10 #>    USUBJID FAOBJ   ATPTREF  AVAL AVALC    FATEST  FATESTCD FASCAT EVENTL EVENTDL #>    <chr>   <chr>   <chr>   <dbl> <chr>    <chr>   <chr>    <chr>  <chr>  <chr>   #>  1 1       REDNESS VAC1      3.5 3.5      Diamet… DIAMETER ADMIN… Y      Y       #>  2 1       REDNESS VAC1      4.5 4.5      Diamet… DIAMETER ADMIN… Y      Y       #>  3 1       REDNESS VAC1      1.5 1.5      Diamet… DIAMETER ADMIN… Y      N       #>  4 1       REDNESS VAC1      4.5 4.5      Diamet… DIAMETER ADMIN… Y      Y       #>  5 1       FATIGUE VAC1      1   MILD     Severi… SEV      SYSTE… Y      Y       #>  6 1       FATIGUE VAC1      2   MODERATE Severi… SEV      SYSTE… Y      Y       #>  7 1       FATIGUE VAC1      0   NONE     Severi… SEV      SYSTE… Y      N       #>  8 1       FATIGUE VAC1      2   MODERATE Severi… SEV      SYSTE… Y      Y       #>  9 1       REDNESS VAC2      6.5 6.5      Diamet… DIAMETER ADMIN… Y      Y       #> 10 1       REDNESS VAC2      7.5 7.5      Diamet… DIAMETER ADMIN… Y      Y       #> 11 1       REDNESS VAC2      2.5 2.5      Diamet… DIAMETER ADMIN… Y      N       #> 12 1       REDNESS VAC2      7.5 7.5      Diamet… DIAMETER ADMIN… Y      Y       #> 13 1       FATIGUE VAC2      1   MILD     Severi… SEV      SYSTE… Y      Y       #> 14 1       FATIGUE VAC2      2   MODERATE Severi… SEV      SYSTE… Y      Y       #> 15 1       FATIGUE VAC2      0   NONE     Severi… SEV      SYSTE… Y      N       #> 16 1       FATIGUE VAC2      2   MODERATE Severi… SEV      SYSTE… Y      Y"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_max_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating ANLxxFL Variables To Flag The Maximum Records — derive_vars_max_flag","title":"Creating ANLxxFL Variables To Flag The Maximum Records — derive_vars_max_flag","text":"Adds Flags variables maximum record per subject per event overall per vaccination","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_max_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating ANLxxFL Variables To Flag The Maximum Records — derive_vars_max_flag","text":"","code":"derive_vars_max_flag(dataset, flag1 = \"ANL01FL\", flag2 = \"ANL02FL\")"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_max_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating ANLxxFL Variables To Flag The Maximum Records — derive_vars_max_flag","text":"dataset Input dataset flag1 Flags maximum record per subject per event per vaccination. Permitted value: variable name string NULL. NULL denotes create flag flag2 Flags maximum record per subject per event Overall Permitted value: variable name string NULL. NULL denotes create flag","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_max_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating ANLxxFL Variables To Flag The Maximum Records — derive_vars_max_flag","text":"output dataframe ANLxxFL flags","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_max_flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating ANLxxFL Variables To Flag The Maximum Records — derive_vars_max_flag","text":"utility flags maximum record per subject per event per vaccination/Overall parameters flag1 & flag2 passed NULL utility throw error flags created.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_max_flag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creating ANLxxFL Variables To Flag The Maximum Records — derive_vars_max_flag","text":"Dhivya Kanagaraj","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_max_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating ANLxxFL Variables To Flag The Maximum Records — derive_vars_max_flag","text":"","code":"library(dplyr) library(admiraldev) library(admiral) library(tibble)  input <- tribble(   ~USUBJID, ~FAOBJ, ~FATESTCD, ~FATPTREF, ~AVAL, ~FATPT, ~PARAMCD,   \"ABC101\", \"REDNESS\", \"DIAMETER\", \"VACC 1\", 10, \"DAY 1\", \"DIARE\",   \"ABC101\", \"REDNESS\", \"DIAMETER\", \"VACC 1\", 7, \"DAY 2\", \"DIARE\",   \"ABC101\", \"REDNESS\", \"DIAMETER\", \"VACC 2\", 3, \"DAY 1\", \"DIARE\",   \"ABC101\", \"REDNESS\", \"DIAMETER\", \"VACC 2\", 8, \"DAY 2\", \"DIARE\",   \"ABC101\", \"FATIQUE\", \"SEV\", \"VACC 1\", 1, \"DAY 1\", \"SEVFAT\",   \"ABC101\", \"FATIQUE\", \"SEV\", \"VACC 1\", 1, \"DAY 2\", \"SEVFAT\",   \"ABC101\", \"FATIQUE\", \"SEV\", \"VACC 2\", 2, \"DAY 1\", \"SEVFAT\",   \"ABC101\", \"FATIQUE\", \"SEV\", \"VACC 2\", 3, \"DAY 2\", \"SEVFAT\" )  derive_vars_max_flag(   dataset = input,   flag1 = \"ANL01FL\",   flag2 = \"ANL02FL\" ) #> Joining with `by = join_by(USUBJID, FAOBJ, FATESTCD, FATPTREF, AVAL, FATPT, #> PARAMCD)` #> Joining with `by = join_by(USUBJID, FAOBJ, FATESTCD, FATPTREF, AVAL, FATPT, #> PARAMCD, ANL01FL)` #> # A tibble: 8 × 9 #>   USUBJID FAOBJ   FATESTCD FATPTREF  AVAL FATPT PARAMCD ANL01FL ANL02FL #>   <chr>   <chr>   <chr>    <chr>    <dbl> <chr> <chr>   <chr>   <chr>   #> 1 ABC101  REDNESS DIAMETER VACC 1      10 DAY 1 DIARE   Y       Y       #> 2 ABC101  REDNESS DIAMETER VACC 1       7 DAY 2 DIARE   NA      NA      #> 3 ABC101  REDNESS DIAMETER VACC 2       3 DAY 1 DIARE   NA      NA      #> 4 ABC101  REDNESS DIAMETER VACC 2       8 DAY 2 DIARE   Y       NA      #> 5 ABC101  FATIQUE SEV      VACC 1       1 DAY 1 SEVFAT  Y       NA      #> 6 ABC101  FATIQUE SEV      VACC 1       1 DAY 2 SEVFAT  NA      NA      #> 7 ABC101  FATIQUE SEV      VACC 2       2 DAY 1 SEVFAT  NA      NA      #> 8 ABC101  FATIQUE SEV      VACC 2       3 DAY 2 SEVFAT  Y       Y       derive_vars_max_flag(   dataset = input,   flag1 = NULL,   flag2 = \"ANL02FL\" ) #> Joining with `by = join_by(USUBJID, FAOBJ, FATESTCD, FATPTREF, AVAL, FATPT, #> PARAMCD)` #> # A tibble: 8 × 8 #>   USUBJID FAOBJ   FATESTCD FATPTREF  AVAL FATPT PARAMCD ANL02FL #>   <chr>   <chr>   <chr>    <chr>    <dbl> <chr> <chr>   <chr>   #> 1 ABC101  REDNESS DIAMETER VACC 1      10 DAY 1 DIARE   Y       #> 2 ABC101  REDNESS DIAMETER VACC 1       7 DAY 2 DIARE   NA      #> 3 ABC101  REDNESS DIAMETER VACC 2       3 DAY 1 DIARE   NA      #> 4 ABC101  REDNESS DIAMETER VACC 2       8 DAY 2 DIARE   NA      #> 5 ABC101  FATIQUE SEV      VACC 1       1 DAY 1 SEVFAT  NA      #> 6 ABC101  FATIQUE SEV      VACC 1       1 DAY 2 SEVFAT  NA      #> 7 ABC101  FATIQUE SEV      VACC 2       2 DAY 1 SEVFAT  NA      #> 8 ABC101  FATIQUE SEV      VACC 2       3 DAY 2 SEVFAT  Y       derive_vars_max_flag(   dataset = input,   flag1 = \"ANL01FL\",   flag2 = NULL ) #> Joining with `by = join_by(USUBJID, FAOBJ, FATESTCD, FATPTREF, AVAL, FATPT, #> PARAMCD)` #> # A tibble: 8 × 8 #>   USUBJID FAOBJ   FATESTCD FATPTREF  AVAL FATPT PARAMCD ANL01FL #>   <chr>   <chr>   <chr>    <chr>    <dbl> <chr> <chr>   <chr>   #> 1 ABC101  REDNESS DIAMETER VACC 1      10 DAY 1 DIARE   Y       #> 2 ABC101  REDNESS DIAMETER VACC 1       7 DAY 2 DIARE   NA      #> 3 ABC101  REDNESS DIAMETER VACC 2       3 DAY 1 DIARE   NA      #> 4 ABC101  REDNESS DIAMETER VACC 2       8 DAY 2 DIARE   Y       #> 5 ABC101  FATIQUE SEV      VACC 1       1 DAY 1 SEVFAT  Y       #> 6 ABC101  FATIQUE SEV      VACC 1       1 DAY 2 SEVFAT  NA      #> 7 ABC101  FATIQUE SEV      VACC 2       2 DAY 1 SEVFAT  NA      #> 8 ABC101  FATIQUE SEV      VACC 2       3 DAY 2 SEVFAT  Y"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_merged_vaccine.html","id":null,"dir":"Reference","previous_headings":"","what":"Add New Variable(s) to the Input dataset Based on Variables from Another dataset — derive_vars_merged_vaccine","title":"Add New Variable(s) to the Input dataset Based on Variables from Another dataset — derive_vars_merged_vaccine","text":"Add new variables input dataset based variables another dataset. variables added output dataset based input variables passed ex_vars argument.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_merged_vaccine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add New Variable(s) to the Input dataset Based on Variables from Another dataset — derive_vars_merged_vaccine","text":"","code":"derive_vars_merged_vaccine(   dataset,   dataset_ex,   by_vars_sys,   by_vars_adms,   dataset_supp = NULL,   dataset_suppex = NULL,   ex_vars )"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_merged_vaccine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add New Variable(s) to the Input dataset Based on Variables from Another dataset — derive_vars_merged_vaccine","text":"dataset Input dataset variables specified by_vars argument inside derive_vars_mergedare expected. dataset_ex EX dataset merge input dataset. variables specified ex_vars argument expected. by_vars_sys Grouping variables systemic events. by_vars_adms Grouping variables administration site events. dataset_supp Supplementary input dataset default dataset_supp NULL, user provide supplementary dataset merge back original input dataset supplementary dataset case. dataset_suppex Supplementary EX dataset default dataset_suppex NULL, user provide supplementary dataset merge back original EX dataset supplementary dataset case. ex_vars Variables added output dataset EX dataset","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_merged_vaccine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add New Variable(s) to the Input dataset Based on Variables from Another dataset — derive_vars_merged_vaccine","text":"dataset variables added EX dataset.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_merged_vaccine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add New Variable(s) to the Input dataset Based on Variables from Another dataset — derive_vars_merged_vaccine","text":"input dataset merged EX dataset \"ADMINISTRATION SITE\" \"SYSTEMIC\" categories separately datasets bound together final output dataset. function intended add EX variables input dataset user expected handle pre-processing required. variables passed ex_vars added output dataset input dataset multiple vaccination subject visit function merge ex dataset return input dataset merged supplementary dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_merged_vaccine.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add New Variable(s) to the Input dataset Based on Variables from Another dataset — derive_vars_merged_vaccine","text":"Vikram S","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_merged_vaccine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add New Variable(s) to the Input dataset Based on Variables from Another dataset — derive_vars_merged_vaccine","text":"","code":"library(tibble) library(admiral) library(dplyr) library(pharmaversesdtm)  derive_vars_merged_vaccine(   dataset = face_vaccine,   dataset_ex = ex_vaccine,   dataset_supp = NULL,   dataset_suppex = NULL,   by_vars_sys = exprs(USUBJID, FATPTREF = EXLNKGRP),   by_vars_adms = exprs(USUBJID, FATPTREF = EXLNKGRP, FALOC = EXLOC, FALAT = EXLAT),   ex_vars = exprs(EXTRT, EXDOSE, EXDOSU, EXSTDTC, EXENDTC) ) %>%   select(USUBJID, FATPTREF, FALOC, FALAT, EXTRT, EXDOSE, EXDOSU, EXSTDTC, EXENDTC) %>%   head(10) #> # A tibble: 10 × 9 #>    USUBJID  FATPTREF      FALOC        FALAT EXTRT EXDOSE EXDOSU EXSTDTC EXENDTC #>    <chr>    <chr>         <chr>        <chr> <chr>  <dbl> <chr>  <chr>   <chr>   #>  1 ABC-1001 VACCINATION 1 DELTOID MUS… LEFT  VACC…      1 SYRIN… 2021-1… 2021-1… #>  2 ABC-1001 VACCINATION 1 DELTOID MUS… LEFT  VACC…      1 SYRIN… 2021-1… 2021-1… #>  3 ABC-1001 VACCINATION 1 DELTOID MUS… LEFT  VACC…      1 SYRIN… 2021-1… 2021-1… #>  4 ABC-1001 VACCINATION 1 DELTOID MUS… LEFT  VACC…      1 SYRIN… 2021-1… 2021-1… #>  5 ABC-1001 VACCINATION 1 DELTOID MUS… LEFT  VACC…      1 SYRIN… 2021-1… 2021-1… #>  6 ABC-1001 VACCINATION 1 DELTOID MUS… LEFT  VACC…      1 SYRIN… 2021-1… 2021-1… #>  7 ABC-1001 VACCINATION 1 DELTOID MUS… LEFT  VACC…      1 SYRIN… 2021-1… 2021-1… #>  8 ABC-1001 VACCINATION 1 DELTOID MUS… LEFT  VACC…      1 SYRIN… 2021-1… 2021-1… #>  9 ABC-1001 VACCINATION 1 DELTOID MUS… LEFT  VACC…      1 SYRIN… 2021-1… 2021-1… #> 10 ABC-1001 VACCINATION 1 DELTOID MUS… LEFT  VACC…      1 SYRIN… 2021-1… 2021-1…  derive_vars_merged_vaccine(   dataset = face_vaccine,   dataset_ex = ex_vaccine,   dataset_supp = suppface_vaccine,   dataset_suppex = suppex_vaccine,   by_vars_sys = exprs(USUBJID, FATPTREF = EXLNKGRP),   by_vars_adms = exprs(USUBJID, FATPTREF = EXLNKGRP, FALOC = EXLOC, FALAT = EXLAT),   ex_vars = exprs(EXTRT, EXDOSE, EXDOSU, EXSTDTC, EXENDTC) ) %>%   filter(CLTYP == \"DAIRY\") %>%   select(USUBJID, FATPTREF, CLTYP, EXTRT, EXDOSE, EXDOSU, EXSTDTC, EXENDTC) #> # A tibble: 4 × 8 #>   USUBJID  FATPTREF      CLTYP EXTRT     EXDOSE EXDOSU  EXSTDTC          EXENDTC #>   <chr>    <chr>         <chr> <chr>      <dbl> <chr>   <chr>            <chr>   #> 1 ABC-1001 VACCINATION 1 DAIRY VACCINE A      1 SYRINGE 2021-11-03T10:5… 2021-1… #> 2 ABC-1001 VACCINATION 1 DAIRY VACCINE A      1 SYRINGE 2021-11-03T10:5… 2021-1… #> 3 ABC-1002 VACCINATION 1 DAIRY VACCINE A      1 SYRINGE 2021-10-07T12:4… 2021-1… #> 4 ABC-1002 VACCINATION 1 DAIRY VACCINE A      1 SYRINGE 2021-10-07T12:4… 2021-1…"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Assigning Parameter Variables — derive_vars_params","title":"Assigning Parameter Variables — derive_vars_params","text":"Creating PARAMCD lookup dataset assigning PARAM,PARAMN,PARCAT1, PARCAT2 variables","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assigning Parameter Variables — derive_vars_params","text":"","code":"derive_vars_params(dataset, lookup_dataset, merge_vars)"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assigning Parameter Variables — derive_vars_params","text":"dataset Input dataset Input dataset expected variables USUBJID,FAOBJ, FACAT, FATESTCD FATEST lookup_dataset lookup dataset containing PARAMCD values every unique FATESTCD FAOBJ lookup dataset expected variables FATEST, PARAMCD, FATESTCD, FAOBJ one entry every unique FATESTCD FAOBJ merge_vars List Variables need merged lookup dataset","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assigning Parameter Variables — derive_vars_params","text":"output dataset contains observations variables input dataset along PARAM,PARAMCD,PARCAT1,PARCAT2,PARAMN","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assigning Parameter Variables — derive_vars_params","text":"lookup dataset required PARAMCD values every combination FATEST & FAOBJ. PARAMCD PARAMN PARAMN PARCAT1 PARCAT2 values can assigned lookup dataset.","code":"if `PARAMN` not assigned in lookup dataset then  `PARAMN` is assigned with a unique number for every unique PARAM value.  if `PARAM` value not assigned in lookup dataset then  `PARAM` value is a combination of `FAOBJ` `FATEST` `FASTRESU` `FALOC`  `FADIR` `FALAT`  if `PARCAT1` value not assigned in lookup dataset then  `PARCAT1` is assigned as `FACAT`  if `PARCAT2` value not assigned in lookup dataset then  `PARCAT2` is assigned as `FASCAT`"},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_params.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assigning Parameter Variables — derive_vars_params","text":"Dhivya Kanagaraj","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assigning Parameter Variables — derive_vars_params","text":"","code":"library(admiral) library(tibble) library(dplyr)  lookup_dataset <- tibble::tribble(   ~FATESTCD, ~PARAMCD, ~PARAMN, ~FATEST, ~FAOBJ,   \"SEV\", \"SEVREDN\", 1, \"Severity\", \"Redness\",   \"DIAMETER\", \"DIARE\", 2, \"Diameter\", \"Redness\",   \"MAXDIAM\", \"MDIRE\", 3, \"Maximum Diameter cm\", \"Redness\",   \"MAXTEMP\", \"MAXTEMP\", 4, \"Maximum Temperature\", \"Fever\",   \"OCCUR\", \"OCFEVER\", 5, \"Occurrence Indicator\", \"Fever\",   \"OCCUR\", \"OCERYTH\", 6, \"Occurrence Indicator\", \"Erythema\",   \"SEV\", \"SEVPAIN\", 7, \"Severity\", \"Pain at Injection site\",   \"OCCUR\", \"OCPAIN\", 8, \"Occurrence Indicator\", \"Pain at Injection site\",   \"OCCUR\", \"OCSWEL\", 9, \"Occurrence Indicator\", \"Swelling\" )  input <- tibble::tribble(   ~USUBJID, ~FACAT, ~FASCAT, ~FATESTCD, ~FAOBJ, ~FATEST, ~FALOC, ~FALAT,   \"ABC101\", \"REACTO\", \"ADMIN\", \"SEV\", \"Redness\", \"Severity\", \"ARM\", \"LEFT\",   \"ABC101\", \"REACTO\", \"ADMIN\", \"DIAMETER\", \"Redness\", \"Diameter\", \"ARM\", \"RIGHT\",   \"ABC101\", \"REACTO\", \"ADMIN\", \"MAXDIAM\", \"Redness\", \"Maximum Diameter\", NA, NA,   \"ABC101\", \"REACTO\", \"SYSTEMIC\", \"MAXTEMP\", \"Fever\", \"Maximum Temp\", NA, NA,   \"ABC101\", \"REACTO\", \"SYSTEMIC\", \"OCCUR\", \"Fever\", \"Occurrence\", NA, NA,   \"ABC101\", \"REACTO\", \"ADMIN\", \"OCCUR\", \"Erythema\", \"Occurrence\", NA, NA,   \"ABC101\", \"REACTO\", \"ADMIN\", \"SEV\", \"Swelling\", \"Severity\", NA, NA,   \"ABC101\", \"REACTO\", \"ADMIN\", \"OCCUR\", \"Swelling\", \"Occurrence\", NA, NA,   \"ABC101\", \"REACTO\", \"ADMIN\", \"OCCUR\", \"Swelling\", \"Occurrence\", NA, NA )  derive_vars_params(   dataset = input,   lookup_dataset = lookup_dataset,   merge_vars = exprs(PARAMCD, PARAMN) ) #> # A tibble: 9 × 13 #>   USUBJID FACAT  FASCAT   FATESTCD PARAM FAOBJ FATEST FALOC FALAT PARAMCD PARAMN #>   <chr>   <chr>  <chr>    <chr>    <chr> <chr> <chr>  <chr> <chr> <chr>    <dbl> #> 1 ABC101  REACTO ADMIN    SEV      Redn… Redn… Sever… ARM   LEFT  SEVREDN      1 #> 2 ABC101  REACTO ADMIN    DIAMETER Redn… Redn… Diame… ARM   RIGHT DIARE        2 #> 3 ABC101  REACTO ADMIN    MAXDIAM  Redn… Redn… Maxim… NA    NA    MDIRE        3 #> 4 ABC101  REACTO SYSTEMIC MAXTEMP  Feve… Fever Maxim… NA    NA    MAXTEMP      4 #> 5 ABC101  REACTO SYSTEMIC OCCUR    Feve… Fever Occur… NA    NA    OCFEVER      5 #> 6 ABC101  REACTO ADMIN    OCCUR    Eryt… Eryt… Occur… NA    NA    OCERYTH      6 #> 7 ABC101  REACTO ADMIN    SEV      Swel… Swel… Sever… NA    NA    NA          NA #> 8 ABC101  REACTO ADMIN    OCCUR    Swel… Swel… Occur… NA    NA    OCSWEL       9 #> 9 ABC101  REACTO ADMIN    OCCUR    Swel… Swel… Occur… NA    NA    OCSWEL       9 #> # ℹ 2 more variables: PARCAT1 <chr>, PARCAT2 <chr>"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_vaxdt.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Vaccination Date Variables to the Output Dataset — derive_vars_vaxdt","title":"Add Vaccination Date Variables to the Output Dataset — derive_vars_vaxdt","text":"Creates vaccination date variables EX domain. date variable created vaccination taking values variable EXSTDTC.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_vaxdt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Vaccination Date Variables to the Output Dataset — derive_vars_vaxdt","text":"","code":"derive_vars_vaxdt(dataset, dataset_adsl, by_vars, order)"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_vaxdt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Vaccination Date Variables to the Output Dataset — derive_vars_vaxdt","text":"dataset Input dataset variables specified by_vars argument expected. dataset_adsl Input adsl dataset vaccination date variables created merged adsl dataset. by_vars Grouping variables. variables grouped filter first observation within group. order Sorting variables. variables order specified either ascending descending order. default ascending order applicable.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_vaxdt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Vaccination Date Variables to the Output Dataset — derive_vars_vaxdt","text":"adsl dataset vaccination date variables added .","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_vaxdt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Vaccination Date Variables to the Output Dataset — derive_vars_vaxdt","text":"multiple vaccinations visit per subject,warning provided first observation filtered based variable order specified order argument. case, user need select by_vars appropriately. number variables created based number vaccinations per subject per visit.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_vaxdt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add Vaccination Date Variables to the Output Dataset — derive_vars_vaxdt","text":"Vikram S","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/derive_vars_vaxdt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Vaccination Date Variables to the Output Dataset — derive_vars_vaxdt","text":"","code":"library(tibble) library(admiral) library(dplyr)  input <- tribble(   ~USUBJID, ~EXSTDTC, ~VISITNUM, ~EXTRT, ~EXLNKGRP, ~VISIT,   \"A001\", \"2015-01-10\", 1, \"DRUG A\", \"VAC 1\", \"VISIT 1\",   \"A001\", \"2015-01-11\", 2, \"DRUG A\", \"VAC 2\", \"VISIT 2\",   \"A001\", \"2015-01-12\", 3, \"DRUG B\", \"VAC 3\", \"VISIT 3\",   \"A002\", \"2015-01-13\", 1, \"DRUG B\", \"VAC 1\", \"VISIT 1\",   \"A002\", \"2015-01-14\", 2, \"DRUG C\", \"VAC 2\", \"VISIT 2\" )  adsl <- tribble(   ~USUBJID, ~SEX, ~AGE,   \"A001\", \"MALE\", 23,   \"A002\", \"FEMALE\", 26, )  derive_vars_vaxdt(   dataset = input,   dataset_adsl = adsl,   by_vars = exprs(USUBJID, VISITNUM),   order = exprs(USUBJID, VISITNUM, VISIT, EXSTDTC) ) #> # A tibble: 2 × 6 #>   USUBJID SEX      AGE VAX01DT    VAX02DT    VAX03DT    #>   <chr>   <chr>  <dbl> <date>     <date>     <date>     #> 1 A001    MALE      23 2015-01-10 2015-01-11 2015-01-12 #> 2 A002    FEMALE    26 2015-01-13 2015-01-14 NA"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/max_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating Maximum Flag — max_flag","title":"Creating Maximum Flag — max_flag","text":"Flag maximum records depends grouping variables flag variable.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/max_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating Maximum Flag — max_flag","text":"","code":"max_flag(dataset, by_vars, fl)"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/max_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating Maximum Flag — max_flag","text":"dataset Input dataset by_vars variables goes group , create flag. Pass variables inside exprs(). fl Flag variable name, Pass string.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/max_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating Maximum Flag — max_flag","text":"Data frame flag variable flagged maximum value records depending variables passed by_vars user.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/max_flag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creating Maximum Flag — max_flag","text":"Dhivya Kanagaraj","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/max_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating Maximum Flag — max_flag","text":"","code":"library(tibble) library(admiral)  input <- tribble(   ~USUBJID, ~FAOBJ, ~FATESTCD, ~FATPTREF, ~AVAL, ~FATPT, ~PARAMCD,   \"ABC101\", \"REDNESS\", \"DIAMETER\", \"VACC 1\", 10, \"DAY 1\", \"DIARE\",   \"ABC101\", \"REDNESS\", \"DIAMETER\", \"VACC 1\", 7, \"DAY 2\", \"DIARE\",   \"ABC101\", \"REDNESS\", \"DIAMETER\", \"VACC 2\", 3, \"DAY 1\", \"DIARE\",   \"ABC101\", \"REDNESS\", \"DIAMETER\", \"VACC 2\", 8, \"DAY 2\", \"DIARE\",   \"ABC101\", \"FATIQUE\", \"SEV\", \"VACC 1\", 1, \"DAY 1\", \"SEVFAT\",   \"ABC101\", \"FATIQUE\", \"SEV\", \"VACC 1\", 1, \"DAY 2\", \"SEVFAT\",   \"ABC101\", \"FATIQUE\", \"SEV\", \"VACC 2\", 2, \"DAY 1\", \"SEVFAT\",   \"ABC101\", \"FATIQUE\", \"SEV\", \"VACC 2\", 3, \"DAY 2\", \"SEVFAT\" )  max_flag(   dataset = input,   by_vars = exprs(USUBJID, FAOBJ, FATPTREF, PARAMCD),   fl = \"ANL01FL\" ) #> Joining with `by = join_by(USUBJID, FAOBJ, FATESTCD, FATPTREF, AVAL, FATPT, #> PARAMCD)` #> # A tibble: 8 × 8 #>   USUBJID FAOBJ   FATESTCD FATPTREF  AVAL FATPT PARAMCD ANL01FL #>   <chr>   <chr>   <chr>    <chr>    <dbl> <chr> <chr>   <chr>   #> 1 ABC101  REDNESS DIAMETER VACC 1      10 DAY 1 DIARE   Y       #> 2 ABC101  REDNESS DIAMETER VACC 1       7 DAY 2 DIARE   NA      #> 3 ABC101  REDNESS DIAMETER VACC 2       3 DAY 1 DIARE   NA      #> 4 ABC101  REDNESS DIAMETER VACC 2       8 DAY 2 DIARE   Y       #> 5 ABC101  FATIQUE SEV      VACC 1       1 DAY 1 SEVFAT  Y       #> 6 ABC101  FATIQUE SEV      VACC 1       1 DAY 2 SEVFAT  NA      #> 7 ABC101  FATIQUE SEV      VACC 2       2 DAY 1 SEVFAT  NA      #> 8 ABC101  FATIQUE SEV      VACC 2       3 DAY 2 SEVFAT  Y"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/post_process_reacto.html","id":null,"dir":"Reference","previous_headings":"","what":"Post processing function for ADFACE dataset — post_process_reacto","title":"Post processing function for ADFACE dataset — post_process_reacto","text":"used post processing ADaM reactogenicity dataset, derived SDTM level records, corresponding values FA variables NA.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/post_process_reacto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post processing function for ADFACE dataset — post_process_reacto","text":"","code":"post_process_reacto(   dataset,   filter_dataset = FATESTCD %in% c(\"MAXDIAM\", \"MAXSEV\", \"MAXTEMP\") | (FATESTCD ==     \"OCCUR\" & FAOBJ == \"FEVER\") )"},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/post_process_reacto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post processing function for ADFACE dataset — post_process_reacto","text":"dataset Input dataset filter_dataset Filter condition Conversion records FA variables NA depends condition.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/post_process_reacto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post processing function for ADFACE dataset — post_process_reacto","text":"input dataframe NA values FA variables SDTM records modified ADaM derivation purpose.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/post_process_reacto.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Post processing function for ADFACE dataset — post_process_reacto","text":"Arjun Rubalingam","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/reference/post_process_reacto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post processing function for ADFACE dataset — post_process_reacto","text":"","code":"library(dplyr) library(admiral) library(tibble)  input <- tribble(   ~USUBJID, ~FAOBJ, ~FALAT, ~FACAT, ~FASCAT, ~FATPT, ~FATESTCD, ~PARAMCD, ~AVAL,   \"ABC-1001\", \"FEVER\", NA, \"REACTO\", \"SYS\", \"DAY 1\", \"MAXTEMP\", \"MAXTEMP\", 39.4,   \"ABC-1001\", \"VOMITING\", NA, \"REACTO\", \"SYS\", \"DAY 4\", \"MAXSEV\", \"MAXVOMIT\", 3,   \"ABC-1001\", \"SWELLING\", \"LEFT\", \"REACTO\", \"ADMIN\", \"DAY 1\", \"MAXSEV\", \"MAXSWEL\", 3,   \"ABC-1001\", \"REDNESS\", \"LEFT\", \"REACTO\", \"ADMIN\", \"DAY 2\", \"DIAMATER\", \"DIARE\", 10.3,   \"ABC-1001\", \"FEVER\", \"LEFT\", \"REACTO\", \"SYS\", \"DAY 2\", \"OCCUR\", \"OCCFEV\", NA )  post_process_reacto(   dataset = input,   filter_dataset = FATESTCD %in% c(\"MAXSEV\", \"MAXTEMP\") |     (FATESTCD == \"OCCUR\" & FAOBJ == \"FEVER\") ) #> # A tibble: 5 × 9 #>   USUBJID  FAOBJ   FALAT FACAT  FASCAT FATPT FATESTCD PARAMCD   AVAL #>   <chr>    <chr>   <chr> <chr>  <chr>  <chr> <chr>    <chr>    <dbl> #> 1 ABC-1001 NA      NA    NA     NA     NA    NA       MAXTEMP   39.4 #> 2 ABC-1001 NA      NA    NA     NA     NA    NA       MAXVOMIT   3   #> 3 ABC-1001 NA      NA    NA     NA     NA    NA       MAXSWEL    3   #> 4 ABC-1001 REDNESS LEFT  REACTO ADMIN  DAY 2 DIAMATER DIARE     10.3 #> 5 ABC-1001 NA      NA    NA     NA     NA    NA       OCCFEV    NA"},{"path":[]},{"path":"https://pharmaverse.github.io/admiralvaccine/news/index.html","id":"updates-to-templates-0-2-0","dir":"Changelog","previous_headings":"","what":"Updates to Templates","title":"admiralvaccine 0.2.0","text":"Modified calls derive_vars_joined() ADCE, ADFACE ADIS templates line updates function new version admiral package. join_type argument now always specified populated '' (#229). Modified calls derive_extreme_records() ADFACE template line updates function new version admiral package. filter argument now renamed filter_add argument dataset_add now always specified. (#229).","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/news/index.html","id":"updates-to-documentation-0-2-0","dir":"Changelog","previous_headings":"","what":"Updates to Documentation","title":"admiralvaccine 0.2.0","text":"Modified calls derive_vars_joined() ADCE, ADFACE ADIS vignettes line updates function new version admiral package. join_type argument now always specified populated (#229). Modified calls derive_extreme_records() ADFACE vignette line updates function new version admiral package. filter argument now renamed filter_add argument dataset_add now always specified. (#229). dummy SDTM data used package, replaced data available pharmaversesdtm package (#228).","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/news/index.html","id":"various-0-2-0","dir":"Changelog","previous_headings":"","what":"Various","title":"admiralvaccine 0.2.0","text":"Website now button/links Slack channel GitHub Issues (#225). Lee Armishaw added contributor (#225).","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/news/index.html","id":"admiralvaccine-010","dir":"Changelog","previous_headings":"","what":"admiralvaccine 0.1.0","title":"admiralvaccine 0.1.0","text":"CRAN release: 2023-06-27","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"admiralvaccine 0.1.0","text":"Created SDTM dummy data , SUPPIS ADIS (#31, #26) Created SDTM dummy data DM, CE, EX, FACE, VS ADCE ADFACE. Developed new functionalities ADFACE, ADIS ADIS domain. Added metatools, metacore packages staged_dependencies.yaml file. Created template ADSL.","code":""},{"path":"https://pharmaverse.github.io/admiralvaccine/news/index.html","id":"documentation-0-1-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"admiralvaccine 0.1.0","text":"Created ADIS vignette. Created ADCE vignette. Created ADSL vignette. Created ADFACE vignette.","code":""}]
